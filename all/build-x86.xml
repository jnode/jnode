<project name="JNode-x86" default="all" basedir=".">

  <property name="my-build.dir"     value="${build.dir}/x86"/>
  <property name="my-lib.dir"       value="${basedir}/lib/x86"/>
  <property name="my-conf.dir"      value="${basedir}/conf/x86"/>

  <property name="src.native.dir"   value="${root.dir}/core/src/native"/>
  <property name="build.native.dir" value="${my-build.dir}/native"/>
  <property name="build.bootimage.dir" value="${my-build.dir}/bootimage"/>
  <property name="build.netboot.dir" value="${my-build.dir}/netboot"/>
  <property name="jnode.disk"     value="${my-build.dir}/jnodedisk.dat"/>
  <property name="jnode.disk.pln" value="${my-build.dir}/jnodedisk.pln"/>
  <property name="jnode.disk.geometry" value="64/16/32"/>

  <property name="grub-ver"     value="grub-0.93-i386-pc"/>
  <property name="grub.dir"     value="${my-build.dir}/${grub-ver}/boot/grub"/>
  <property name="grub.dist"    value="${my-lib.dir}/${grub-ver}.tar.gz"/>

  <property name="grub.stage1.name"  value="stage1"/>
  <property name="grub.stage2.name"  value="stage2"/>
  <property name="grub.menu"    value="${my-conf.dir}/menu.lst"/>

  <path id="cp-x86">
    <pathelement location="${jnode-builder.jar}"/>
    <pathelement location="${jnode-core.jar}"/>
    <pathelement location="${jnode-fs.jar}"/>
    <pathelement location="${jnode-shell.jar}"/>
    <pathelement location="${jnode-net.jar}"/>
    <pathelement location="${jnode-gui.jar}"/>
    <path refid="cp"/>
    <pathelement location="${my-conf.dir}"/>
    <pathelement location="${grub.dir}"/>
    <pathelement location="${descriptors.dir}"/>
    <pathelement location="${dom4j.jar}"/>
  </path>

  <target name="test-properties">
    <condition property="x86-properties.exists">
      <available file="build-x86.properties"/>
    </condition>
  </target>
  <target name="load-properties" if="x86-properties.exists">
    <property file="build-x86.properties"/>
  </target>
  <target name="default-properties" unless="x86-properties.exists">
    <property name="jnodedrive.dir" value="${my-build.dir}"/>
  </target>

  <target name="prepare-props" depends="test-properties,load-properties,default-properties">
    <property name="jnode.kernel"   value="${jnodedrive.dir}/jnodesys.gz"/>
    <property name="jnode.initjar"  value="${jnodedrive.dir}/jnodeinit.jar"/>
  </target>

<!-- Initialize all project directories -->
  <target name="prepare-dirs" depends="prepare-props">
    <mkdir dir="${build.native.dir}"/>
    <mkdir dir="${build.native.dir}/output"/>
    <mkdir dir="${build.native.dir}/src"/>
    <mkdir dir="${build.bootimage.dir}"/>
    <mkdir dir="${build.netboot.dir}"/>
  </target>

  <target name="test-grub">
    <available file="${grub.dir}" property="grub.exists"/>
  </target>

  <target name="grub" depends="prepare-dirs,test-grub" unless="grub.exists">
	<untar src="${grub.dist}" dest="${my-build.dir}" compression="gzip"/>
  </target>

<!-- Initialize all project properties -->
  <target name="prepare" depends="grub">
    <copy todir="${grub.dir}">
      <fileset dir="${my-lib.dir}">
        <include name="nbgrub-*"/>
        <include name="pxegrub-*"/>
     </fileset>
      <fileset dir="${my-conf.dir}">
        <include name="menu-nb.lst"/>
        <include name="menu-pxe.lst*"/>
      </fileset>
    </copy>
  </target>

  <target name="asm-native" depends="prepare">
    <taskdef name="genconst"
             classname="org.jnode.build.x86.AsmConstBuilder"
             classpathref="cp-x86"/>
    <taskdef name="asm"
             classname="org.jnode.ant.taskdefs.Asm"
             classpathref="cp-x86"/>

    <genconst destfile="${build.native.dir}/src/java.inc"
              classesURL="file:///${jnode-core.jar}/">
      <class classname="org.jnode.boot.Main" static="on"/>
      <class classname="org.jnode.vm.classmgr.TIBLayout" static="on"/>
      <class classname="org.jnode.vm.classmgr.VmByteCode"/>
      <class classname="org.jnode.vm.classmgr.VmConstFieldRef"/>
      <class classname="org.jnode.vm.classmgr.VmConstMethodRef"/>
      <class classname="org.jnode.vm.classmgr.VmConstIMethodRef"/>
      <class classname="org.jnode.vm.classmgr.VmCP"/>
      <class classname="org.jnode.vm.classmgr.VmField"/>
      <class classname="org.jnode.vm.classmgr.VmInstanceField"/>
      <class classname="org.jnode.vm.classmgr.VmStaticField"/>
      <class classname="org.jnode.vm.classmgr.VmMember"/>
      <class classname="org.jnode.vm.classmgr.VmMethod"/>
      <class classname="org.jnode.vm.classmgr.VmInstanceMethod"/>
      <class classname="org.jnode.vm.classmgr.VmType"/>
      <class classname="org.jnode.vm.VmProcessor"/>
      <class classname="org.jnode.vm.VmProcessor" static="on"/>
      <class classname="org.jnode.vm.VmThread"/>
      <class classname="org.jnode.build.x86.BootImageBuilder" static="on"/>
      <class classname="org.jnode.vm.VmStackFrame" static="on"/>
      <class classname="org.jnode.vm.VmSystem" static="on"/>
      <class classname="org.jnode.vm.VmThread" static="on"/>
      <class classname="org.jnode.vm.bytecode.BytecodeParser" static="on"/>
      <class classname="org.jnode.vm.classmgr.VmCP" static="on"/>
      <class classname="org.jnode.vm.classmgr.Modifier" static="on"/>
      <class classname="org.jnode.vm.classmgr.VmArray" static="on"/>
      <class classname="org.jnode.vm.classmgr.ObjectLayout" static="on"/>
      <class classname="org.jnode.vm.SoftByteCodes" static="on"/>
      <class classname="org.jnode.vm.x86.VmX86Processor"/>
      <class classname="org.jnode.vm.x86.VmX86StackReader" static="on"/>
      <class classname="org.jnode.vm.x86.VmX86Thread"/>
      <class classname="java.lang.Integer"/>
      <class classname="java.lang.Long"/>
      <class classname="java.lang.String"/>
      <class classname="java.lang.Throwable"/>
    </genconst>

	<dependset>
       <srcfileset dir="${src.native.dir}/x86"/>
       <srcfileset dir="${build.native.dir}/src"/>
       <targetfileset dir="${build.native.dir}/output"/>
    </dependset>

    <asm srcdir="${src.native.dir}/x86"
         destdir="${build.native.dir}/output"
         outputFormat="elf"
         extension="o"
         listfile="${build.native.dir}/jnodenative.lst">
      <includedir dir="${src.native.dir}/x86"/>
      <includedir dir="${build.native.dir}/src"/>
      <include name="jnode.asm"/>
    </asm>
  </target>

  <target name="shell-usage" depends="prepare">
    <mkdir dir="${root.dir}/docs/build/website-xml"/>
    <taskdef name="exportusage" classname="org.jnode.shell.help.ant.ExportUsageTask" classpathref="cp-x86"/>
    <exportusage destfile="${root.dir}/docs/build/website-xml/shell-commands.xml"
             pluginList="${full-plugin-list}"
             pluginDir="${plugins.dir}"
             targetArch="x86">
      <classpath refid="cp-x86"/>
    </exportusage>
  </target>

<!-- Build the java object file  -->
  <target name="java-image" depends="asm-native">
    <taskdef name="bootimage" classname="org.jnode.build.x86.BootImageBuilder" classpathref="cp-x86"/>
    <taskdef name="bootjar" classname="org.jnode.build.BootJarBuilder" classpathref="cp-x86"/>
    
    <bootjar destfile="${build.bootimage.dir}/jnode-boot.jar"
             pluginList="${system-plugin-list}"
             pluginDir="${plugins.dir}"
             targetArch="x86">
    </bootjar>

    <bootimage destfile="${build.bootimage.dir}/bootimage.bin"
               listfile="${build.bootimage.dir}/bootimage.lst"
               debugfile="${build.bootimage.dir}/bootimage.debug"
               kernelfile="${build.native.dir}/output/jnode.o"
               jarfile="${build.bootimage.dir}/jnode-boot.jar"
               classesURL="jar:file:///${build.bootimage.dir}/jnode-boot.jar!/"
               pluginList="${system-plugin-list}"
               pluginDir="${plugins.dir}"
	           targetArch="x86"
	           cpu="${cpu}"
	           version="${jnode-ver}"
               />

    <gzip src="${build.bootimage.dir}/bootimage.bin" zipfile="${jnode.kernel}"/>
  </target>

<!-- Build the boot disk -->
  <target name="boot-disk" depends="java-image">
    <taskdef name="bootdisk"
             classname="org.jnode.build.BootDiskBuilder"
             classpathref="cp-x86"/>
             
    <mkdir dir="${my-build.dir}/bootdisk"/>
    <mkdir dir="${my-build.dir}/bootdisk/boot/grub"/>
    <copy file="${jnode.kernel}" todir="${my-build.dir}/bootdisk"/>
    <copy file="${grub.menu}" todir="${my-build.dir}/bootdisk/boot/grub"/>
    <copy todir="${my-build.dir}/bootdisk">
      <fileset dir="${initjars.dir}"/>
    </copy>
             
    <bootdisk destfile="${jnode.disk}"
              stage1ResourceName="${grub.stage1.name}"
              stage2ResourceName="${grub.stage2.name}"
              plnfile="${jnode.disk.pln}"
              geometry="${jnode.disk.geometry}">
      <fileset dir="${my-build.dir}/bootdisk"/>
    </bootdisk>
  </target>

<!-- Create a full distributable bootable CDROM image -->
  <target name="cdrom" depends="boot-disk">
    <property name="${cdrom.dir}" value="${my-build.dir}/cdrom-full"/>
    <mkdir dir="${cdrom.dir}"/>
    <copy file="${jnode.disk}" todir="${cdrom.dir}"/>
    <copy file="${sources.dist.tar.gz}" todir="${cdrom.dir}"/>
    <exec executable="mkisofs">
      <arg line="-o ${jnode-x86.iso} -r -hard-disk-boot -b jnodedisk.dat ${cdrom.dir}"/>
    </exec>
  </target>

<!-- Create a bootable CDROM image -->
  <target name="cdrom-lite" depends="boot-disk">
    <property name="${cdrom.dir}" value="${my-build.dir}/cdrom-lite"/>
    <mkdir dir="${cdrom.dir}"/>
    <copy file="${jnode.disk}" todir="${cdrom.dir}"/>
    <exec executable="mkisofs">
      <arg line="-o ${jnode-x86-lite.iso} -r -hard-disk-boot -b jnodedisk.dat ${cdrom.dir}"/>
    </exec>
  </target>

<!-- Prepare for netboot -->
  <target name="netboot" depends="java-image">
    <copy file="${jnode.kernel}" todir="${build.netboot.dir}"/>
    <copy todir="${build.netboot.dir}">
      <fileset dir="${initjars.dir}"/>
    </copy>
    <copy todir="${build.netboot.dir}">
      <fileset dir="${my-lib.dir}">
        <include name="nbgrub-*"/>
        <include name="pxegrub-*"/>
     </fileset>
      <fileset dir="${my-conf.dir}">
        <include name="menu-nb.lst"/>
        <include name="menu-pxe.lst*"/>
      </fileset>
    </copy>
  </target>

  <target name="disasm">
    <exec executable="ndisasm" dir="${basedir}"
          output="${build.bootimage.dir}/bootimage.asm">
      <arg value="-u"/>
      <arg value="-o"/>
      <arg value="0x100000"/>
      <arg value="${build.bootimage.dir}/bootimage.bin"/>
    </exec>
  </target>

<!-- Run all required targets -->
  <target name="all" depends="boot-disk,netboot">
  </target>

</project>


