<project name="JNode-x86" default="all" basedir=".">

  <property name="my-build.dir"     value="${build.dir}/x86"/>
  <property name="my-lib.dir"       value="${basedir}/lib/x86"/>
  <property name="my-conf.dir"      value="${basedir}/conf/x86"/>
  
  <property name="src.native.dir"   value="${root.dir}/core/src/native"/>
  <property name="build.native.dir" value="${my-build.dir}/native"/>
  <property name="build.bootimage.dir" value="${my-build.dir}/bootimage"/>
  <property name="build.netboot.dir" value="${my-build.dir}/netboot"/>
  <property name="jnode.disk"     value="${build.dir}/jnodedisk.dat"/>
  <property name="jnode.disk.pln" value="${build.dir}/jnodedisk.pln"/>
  <property name="jnode.floppy"   value="${build.dir}/jnodefloppy.img"/>
  
  <property name="grub-ver"     value="grub-0.93-i386-pc"/>
  <property name="grub.dir"     value="${my-build.dir}/${grub-ver}/boot/grub"/>
  <property name="grub.dist"    value="${my-lib.dir}/${grub-ver}.tar.gz"/>
  
  <property name="grub.stage1.name"  value="stage1"/>
  <property name="grub.stage2.name"  value="stage2"/>
  <property name="grub.menu"    value="${my-conf.dir}/menu.lst"/>
  
  <path id="cp-x86">
    <pathelement location="${jnode-builder.jar}"/>
    <pathelement location="${jnode-core.jar}"/>
    <pathelement location="${jnode-fs.jar}"/>
    <pathelement location="${jnode-shell.jar}"/>
    <pathelement location="${jnode-net.jar}"/>
    <pathelement location="${jnode-gui.jar}"/>
    <path refid="cp"/>
    <pathelement location="${my-conf.dir}"/>
    <pathelement location="${grub.dir}"/>
    <pathelement location="${descriptors.dir}"/>
    <pathelement location="${dom4j.jar}"/>
  </path>
  
  <target name="test-properties">
    <condition property="x86-properties.exists">
      <available file="build-x86.properties"/>
    </condition>
  </target>
  <target name="load-properties" if="x86-properties.exists">
    <property file="build-x86.properties"/>
  </target>
  <target name="default-properties" unless="x86-properties.exists">
    <property name="jnodedrive.dir" value="${my-build.dir}"/>
	<property name="plugin-list" value="${src.dir}/descriptors/plugin-list.xml"/>
	<property name="plugin.dir" value="${src.dir}/descriptors"/>
  </target>
  
  <target name="prepare-props" depends="test-properties,load-properties,default-properties">
    <property name="jnode.kernel"   value="${jnodedrive.dir}/jnodesys.gz"/>
  </target>
  
<!-- Initialize all project directories -->
  <target name="prepare-dirs" depends="prepare-props">
    <mkdir dir="${build.native.dir}"/>
    <mkdir dir="${build.native.dir}/output"/>
    <mkdir dir="${build.native.dir}/src"/>
    <mkdir dir="${build.bootimage.dir}"/>
    <mkdir dir="${build.netboot.dir}"/>
  </target>

  <target name="test-grub">
    <available file="${grub.dir}" property="grub.exists"/>
  </target>
  
  <target name="grub" depends="prepare-dirs,test-grub" unless="grub.exists">
	<untar src="${grub.dist}" dest="${my-build.dir}" compression="gzip"/> 
  </target>
  
<!-- Initialize all project properties -->
  <target name="prepare" depends="grub">
    <copy todir="${build.netboot.dir}">
      <fileset dir="${my-lib.dir}">
        <include name="nbgrub-*"/>
        <include name="pxegrub-*"/> 
     </fileset>
      <fileset dir="${my-conf.dir}">
        <include name="menu-nb.lst"/>
        <include name="menu-pxe.lst*"/>
      </fileset>
    </copy>
    <copy todir="${grub.dir}">
      <fileset dir="${my-lib.dir}">
        <include name="nbgrub-*"/>
        <include name="pxegrub-*"/> 
     </fileset>
      <fileset dir="${my-conf.dir}">
        <include name="menu-nb.lst"/>
        <include name="menu-pxe.lst*"/>
      </fileset>
    </copy>
  </target>

  <target name="asm-native" depends="prepare">
    <taskdef name="genconst" 
             classname="org.jnode.build.x86.AsmConstBuilder"
             classpathref="cp-x86"/>
    <taskdef name="asm" 
             classname="org.jnode.ant.taskdefs.Asm" 
             classpathref="cp-x86"/>
    
    <genconst destfile="${build.native.dir}/src/java.inc" 
              classesURL="file:///${jnode-core.jar}/">
      <!-- class classname="org.jnode.arch.x86.SoftByteCodes"/ -->
      <class classname="org.jnode.boot.Main" static="on"/>
      <class classname="org.jnode.vm.classmgr.TIBLayout" static="on"/>
      <class classname="org.jnode.vm.classmgr.VmByteCode"/>
      <class classname="org.jnode.vm.classmgr.VmConstFieldRef"/>
      <class classname="org.jnode.vm.classmgr.VmConstMethodRef"/>
      <class classname="org.jnode.vm.classmgr.VmConstIMethodRef"/>
      <class classname="org.jnode.vm.classmgr.VmCP"/>
      <class classname="org.jnode.vm.classmgr.VmField"/>
      <class classname="org.jnode.vm.classmgr.VmInstanceField"/>
      <class classname="org.jnode.vm.classmgr.VmStaticField"/>
      <class classname="org.jnode.vm.classmgr.VmMember"/>
      <class classname="org.jnode.vm.classmgr.VmMethod"/>
      <class classname="org.jnode.vm.classmgr.VmInstanceMethod"/>
      <class classname="org.jnode.vm.classmgr.VmType"/>
      <class classname="org.jnode.vm.VmProcessor"/>
      <class classname="org.jnode.vm.VmProcessor" static="on"/>
      <class classname="org.jnode.vm.VmThread"/>
      <class classname="org.jnode.build.x86.BootImageBuilder" static="on"/>
      <class classname="org.jnode.vm.VmStackFrame" static="on"/>
      <class classname="org.jnode.vm.VmSystem" static="on"/>
      <class classname="org.jnode.vm.VmThread" static="on"/>
      <class classname="org.jnode.vm.bytecode.BytecodeParser" static="on"/>
      <class classname="org.jnode.vm.classmgr.VmCP" static="on"/>
      <class classname="org.jnode.vm.classmgr.Modifier" static="on"/>
      <class classname="org.jnode.vm.classmgr.VmArray" static="on"/>
      <class classname="org.jnode.vm.classmgr.ObjectLayout" static="on"/>
      <class classname="org.jnode.vm.SoftByteCodes" static="on"/>
      <class classname="org.jnode.vm.x86.VmX86Processor"/>
      <class classname="org.jnode.vm.x86.VmX86StackReader" static="on"/>
      <class classname="org.jnode.vm.x86.VmX86Thread"/>
      <class classname="java.lang.Integer"/>
      <class classname="java.lang.Long"/>
      <class classname="java.lang.String"/>
      <class classname="java.lang.Throwable"/>
    </genconst>
    
	<dependset>
       <srcfileset dir="${src.native.dir}/x86"/>
       <srcfileset dir="${build.native.dir}/src"/>
       <targetfileset dir="${build.native.dir}/output"/>
    </dependset>      
    
    <asm srcdir="${src.native.dir}/x86"
         destdir="${build.native.dir}/output"
         outputFormat="elf"
         extension="o"
         listfile="${build.native.dir}/jnodenative.lst">
      <includedir dir="${src.native.dir}/x86"/>
      <includedir dir="${build.native.dir}/src"/>
      <include name="jnode.asm"/>
    </asm>
  </target>

  <target name="shell-usage" depends="plugins">
    <mkdir dir="${root.dir}/docs/build/website-xml"/>
    <taskdef name="exportusage" classname="org.jnode.shell.help.ant.ExportUsageTask" classpathref="cp-x86"/>
    <exportusage destfile="${root.dir}/docs/build/website-xml/shell-commands.xml"
             pluginList="${plugin-list}"
             pluginDir="${my-build.dir}/plugins"
             targetArch="x86">
      <classpath refid="cp-x86"/>
    </exportusage>
  </target>
  
  <target name="plugins" depends="asm-native">
    <taskdef name="plugin" classname="org.jnode.build.PluginTask" classpathref="cp-x86"/>
    <plugin todir="${my-build.dir}/plugins"
            tmpdir="${my-build.dir}/tmp/plugins"
            pluginDir="${descriptors.dir}">
      <libalias name="jnode-core.jar" alias="${jnode-core.jar}"/>
      <libalias name="jnode-fs.jar" alias="${jnode-fs.jar}"/>
      <libalias name="jnode-gui.jar" alias="${jnode-gui.jar}"/>
      <libalias name="jnode-net.jar" alias="${jnode-net.jar}"/>
      <libalias name="jnode-shell.jar" alias="${jnode-shell.jar}"/>

      <libalias name="commons-net-1.1.0.jar" alias="${commons-net.jar}"/>
      <libalias name="dnsjava-1.5.0.jar" alias="${dnsjava.jar}"/>
      <libalias name="nanoxml.jar" alias="${nanoxml.jar}"/>
      <libalias name="log4j.jar" alias="${log4j.jar}"/>
      <libalias name="lw.jar" alias="${lw.jar}"/>
      <libalias name="junit.jar" alias="${junit.jar}"/>
      <descriptors dir="${descriptors.dir}/">
        <include name="*.xml"/>
        <exclude name="plugin-list.xml"/>
      </descriptors>
    </plugin>
  </target>

<!-- Build the java object file  -->
  <target name="java-image" depends="plugins">
    <taskdef name="bootimage" classname="org.jnode.build.x86.BootImageBuilder" classpathref="cp-x86"/>
    <taskdef name="bootjar" classname="org.jnode.build.BootJarBuilder" classpathref="cp-x86"/>
    <bootjar destfile="${build.bootimage.dir}/jnode-boot.jar"
             pluginList="${plugin-list}"
             pluginDir="${my-build.dir}/plugins"
             targetArch="x86">
    </bootjar>
    
    <bootimage destfile="${build.bootimage.dir}/bootimage.bin"
               listfile="${build.bootimage.dir}/bootimage.lst"
               debugfile="${build.bootimage.dir}/bootimage.debug"
               kernelfile="${build.native.dir}/output/jnode.o"
               jarfile="${build.bootimage.dir}/jnode-boot.jar"
               classesURL="jar:file:///${build.bootimage.dir}/jnode-boot.jar!/"
               pluginList="${plugin-list}"
               pluginDir="${my-build.dir}/plugins"
	           targetArch="x86"
	           cpu="${cpu}"
               />
    <!-- classesURL="file:///${classes.dir}/" -->

    <gzip src="${build.bootimage.dir}/bootimage.bin" zipfile="${jnode.kernel}"/>
    <copy file="${jnode.kernel}" todir="${build.netboot.dir}"/>
  </target>
  
  <target name="disasm">
    <exec executable="ndisasm" dir="${basedir}" 
          output="${build.bootimage.dir}/bootimage.asm">
      <arg value="-u"/>
      <arg value="-o"/>
      <arg value="0x100000"/>
      <arg value="${build.bootimage.dir}/bootimage.bin"/>
    </exec>
  </target>

<!-- Build the boot floppy & disk -->
  <target name="boot-disk" depends="java-image">
  <!-- target name="boot-floppy" -->
    <taskdef name="bootfloppy" 
             classname="org.jnode.build.BootFloppyBuilder" 
             classpathref="cp-x86"/>
    <taskdef name="bootdisk" 
             classname="org.jnode.build.BootDiskBuilder" 
             classpathref="cp-x86"/>
    <bootdisk destfile="${jnode.disk}"
		        kernelfile="${jnode.kernel}"
		        stage1ResourceName="${grub.stage1.name}"
		        stage2ResourceName="${grub.stage2.name}"
      			menufile="${grub.menu}"
      			plnfile="${jnode.disk.pln}"/>
    <bootfloppy destfile="${jnode.floppy}"
		        stage1ResourceName="${grub.stage1.name}"
		        stage2ResourceName="${grub.stage2.name}"
      			menufile="${grub.menu}"/>
  </target>

<!-- Create a bootable CDROM image -->
  <target name="cdrom" depends="boot-disk">
    <mkdir dir="${build.dir}/cdrom"/>
    <copy todir="${build.dir}/cdrom">
      <fileset dir="${build.dir}">
        <include name="jnodedisk.dat"/>
      </fileset>
    </copy>
    <zip zipfile="${build.dir}/cdrom/jnodesource.zip">
      <fileset dir="${root.dir}">
        <exclude name="**/build/**"/>

      </fileset>
    </zip>
    <exec executable="mkisofs">
      <arg line="-o ${build.dir}/jnode.iso -r -hard-disk-boot -b jnodedisk.dat ${build.dir}/cdrom"/>
    </exec>
  </target>

<!-- Run all required targets -->
  <target name="all" depends="boot-disk">
  </target>

</project>


