<project name="JNode" default="help" basedir=".">
    <!-- if task is used from this -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<!-- before including jnode.xml, we must set this property -->
    <condition property="memoryMaximumSize" value="1512m" else="768m">
      <os arch="amd64"/>      
    </condition>
    <echo message="Setting memoryMaximumSize to ${memoryMaximumSize}"/>
	
    <!-- Include antlib -->
    <typedef file="${basedir}/lib/jnode.xml"/>

    <!-- JNode version -->
    <property name="jnode-ver" value="0.2.9-dev"/>

    <!-- Java target and source version -->
    <property name="java.target" value="1.6"/>
    <property name="java.source" value="1.6"/>
    <property name="java.encoding" value="US-ASCII"/>

    <property name="root.dir" value="${basedir}/.."/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="reports.dir" value="${build.dir}/reports"/>
    <property name="cdroms.dir" value="${build.dir}/cdroms"/>
    <property name="descriptors.dir" value="${build.dir}/descriptors"/>
    <property name="plugins.dir" value="${build.dir}/plugins"/>
    <property name="initjars.dir" value="${build.dir}/initjars"/>
    <property name="save.dir" value="${basedir}/save"/>
    <property name="backup.dir" value="${build.dir}/backup"/>

    <property name="jnode-builder.jar" value="${build.dir}/descriptors/jnode-builder.jar"/>
    <property name="jnode-configure.jar" value="${build.dir}/descriptors/jnode-configure.jar"/>
    <property name="jnode-core.jar" value="${root.dir}/core/build/classes"/>
    <property name="jnode-distr.jar" value="${root.dir}/distr/build/classes"/>
    <property name="jnode-fs.jar" value="${root.dir}/fs/build/classes"/>
    <property name="jnode-gui.jar" value="${root.dir}/gui/build/classes"/>
    <property name="thinlet.jar" value="${root.dir}/gui/build/classes"/>
    <property name="jnode-textui.jar" value="${root.dir}/textui/build/classes"/>
    <property name="jnode-net.jar" value="${root.dir}/net/build/classes"/>
    <property name="jnode-shell.jar" value="${root.dir}/shell/build/classes"/>
    <property name="jnode-fonts.jar" value="${build.dir}/descriptors/jnode-fonts.jar"/>
  	<property name="jnode-images.jar" value="${build.dir}/descriptors/jnode-images.jar"/>

    <property name="jnode-mmtk-genrc.jar" value="${root.dir}/core/build/classes-plan/org.jnode.vm.memmgr.mmtk.genrc"/>
	<property name="jnode-mmtk-ms.jar" value="${root.dir}/core/build/classes-plan/org.jnode.vm.memmgr.mmtk.ms"/>
	<property name="jnode-mmtk-nogc.jar" value="${root.dir}/core/build/classes-plan/org.jnode.vm.memmgr.mmtk.nogc"/>

    <property name="ant.jar" value="${root.dir}/core/lib/ant.jar"/>
    <property name="ant-launcher.jar" value="${root.dir}/core/lib/ant-launcher.jar"/>
    <property name="commons-net.jar" value="${root.dir}/core/lib/commons-net-1.1.0.jar"/>
    <property name="dnsjava.jar" value="${root.dir}/net/lib/dnsjava-1.6.6.jar"/>
    <property name="jsch.jar" value="${root.dir}/net/lib/jsch-0.1.24.jar"/>
    <property name="junit.jar" value="${root.dir}/core/lib/junit-4.5.jar"/>
    <property name="mmtk.jar" value="${root.dir}/core/lib/mmtk/mmtk.jar"/>
	<property name="mauve.jar" value="${root.dir}/core/lib/mauve.jar"/>
    <property name="edtftpj.jar" value="${root.dir}/fs/lib/edtftpj-1.5.2.jar"/>
    <property name="jcifs.jar" value="${root.dir}/fs/lib/jcifs-1.2.6.jar"/>
    <property name="ejc.jar" value="${root.dir}/core/lib/ejc-3.1.1.jar"/>
	<property name="oncrpc.jar" value="${root.dir}/net/lib/oncrpc.jar"/>
	<property name="telnetd.jar" value="${root.dir}/distr/lib/telnetd.jar" />
	<property name="commons-logging.jar" value="${root.dir}/distr/lib/commons-logging.jar" />
	<property name="jetty.jar" value="${root.dir}/distr/lib/jetty-6.1.5.jar" />
	<property name="jetty-util.jar" value="${root.dir}/distr/lib/jetty-util-6.1.5.jar" />
    <property name="jsp.jar" value="${root.dir}/distr/lib/jsp-2.1.jar" />
    <property name="jsp-api.jar" value="${root.dir}/distr/lib/jsp-api-2.1.jar" />
    <property name="servlet.jar" value="${root.dir}/distr/lib/servlet-api-2.5-6.1.5.jar" />
    <property name="derby.jar" value="${root.dir}/distr/lib/derby.jar" />
    <property name="derbynet.jar" value="${root.dir}/distr/lib/derbynet.jar" />
    <property name="derbytools.jar" value="${root.dir}/distr/lib/derbytools.jar" />
    <property name="nanoxml-java.jar" value="${root.dir}/shell/lib/nanoxml-2.2.3.jar" />

    <property name="iso9660.jar" value="${root.dir}/builder/lib/iso9660.jar" />
    <property name="sabre.jar" value="${root.dir}/builder/lib/sabre.jar" />

    <!-- libraries needed to run tests -->
    <property name="jmock-cglib.jar" value="${root.dir}/core/lib/jmock-cglib-1.0.1.jar"/>
    <property name="jmock.jar" value="${root.dir}/core/lib/jmock-1.0.1.jar"/>
    <property name="cglib.jar" value="${root.dir}/core/lib/cglib-2.1.jar"/>
    <property name="asm.jar" value="${root.dir}/core/lib/asm-1.5.3.jar"/>
	<property name="asm-attrs.jar" value="${root.dir}/core/lib/asm-attrs-1.5.3.jar"/>
	<property name="asm-util.jar" value="${root.dir}/core/lib/asm-util-1.5.3.jar"/>
	
    <property name="log4j.jar" value="${root.dir}/core/lib/log4j-1.2.8.jar"/>
    <property name="beanshell.jar" value="${root.dir}/shell/lib/bsh-2.0b5.jar"/>
    <property name="js.jar" value="${root.dir}/shell/lib/rhino1.6r5-jsr223.jar"/>

    <!-- libraries needed to check plugin dependencies -->
    <property name="bcel-5.1.jar" value="${root.dir}/builder/lib/bcel-5.1.jar" />	

    <!-- libraries needed to check rules in source code -->
    <property name="pmd.jar" value="${root.dir}/builder/lib/pmd/pmd-3.0.jar"/>
    <property name="jaxen.jar" value="${root.dir}/builder/lib/pmd/jaxen-core-1.0-fcs.jar"/>
    <property name="saxpath.jar" value="${root.dir}/builder/lib/pmd/saxpath-1.0-fcs.jar"/>
    <property name="xerces.jar" value="${root.dir}/builder/lib/pmd/xercesImpl-2.6.2.jar"/>
    <property name="xmlParserAPIs.jar" value="${root.dir}/builder/pmd/lib/xmlParserAPIs-2.6.2.jar"/>

    <!-- lists of plugins to use while booting -->
    <property name="default-plugin-list" value="${basedir}/conf/default-plugin-list.xml"/>
    <property name="full-plugin-list" value="${basedir}/conf/full-plugin-list.xml"/>
    <property name="install-plugin-list" value="${basedir}/conf/install-plugin-list.xml"/>
    <property name="system-plugin-list" value="${basedir}/conf/system-plugin-list.xml"/>
    <property name="sources.dist.tar.gz" value="${build.dir}/jnodesources-${jnode-ver}.tar.gz"/>
    <property name="jnode-x86.iso" value="${cdroms.dir}/jnode-x86.iso"/>
    <property name="jnode-x86-lite.iso" value="${cdroms.dir}/jnode-x86-lite.iso"/>
    <property name="jnode-x86_64-lite.iso" value="${cdroms.dir}/jnode-x86_64-lite.iso"/>

    <path id="cp">
        <pathelement location="${mmtk.jar}"/>
        <pathelement location="${ant.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${jmock.jar}"/>
        <pathelement location="${jmock-cglib.jar}"/>
        <pathelement location="${asm.jar}"/>
    	<pathelement location="${asm-attrs.jar}"/>
    	<pathelement location="${asm-util.jar}"/>
        <pathelement location="${cglib.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${basedir}/conf"/>
        <pathelement location="${beanshell.jar}"/>
        <pathelement location="${js.jar}"/>
        <pathelement location="${oncrpc.jar}"/>
        <pathelement location="${edtftpj.jar}"/>
        <pathelement location="${jcifs.jar}"/>
        <pathelement location="${commons-net.jar}"/>
        <pathelement location="${dnsjava.jar}"/>
        <pathelement location="${mauve.jar}"/>
        <pathelement location="${derby.jar}"/>
        <pathelement location="${derbynet.jar}"/>
        <pathelement location="${derbytools.jar}"/>
        <pathelement location="${iso9660.jar}"/>
        <pathelement location="${sabre.jar}"/>
    </path>

    <path id="cp-jnode">
        <pathelement location="${jnode-builder.jar}"/>
        <pathelement location="${jnode-core.jar}"/>
        <pathelement location="${jnode-distr.jar}"/>
        <pathelement location="${jnode-fs.jar}"/>
        <pathelement location="${jnode-shell.jar}"/>
        <pathelement location="${jnode-net.jar}"/>
        <pathelement location="${jnode-gui.jar}"/>
        <pathelement location="${thinlet.jar}"/>
        <pathelement location="${jnode-textui.jar}"/>
	    <pathelement location="${bcel-5.1.jar}"/>
        <path refid="cp"/>
    </path>


    <filterset id="descriptors-filter">
        <filter token="PROVIDER" value="JNode.org"/>
        <filter token="VERSION" value="${jnode-ver}"/>
    </filterset>

    <patternset id="exts">
        <include name="**/*.dat"/>
        <include name="**/*.ids"/>
        <include name="**/*.properties"/>
        <include name="**/*.xml"/>
    </patternset>

    <target name="prepare">
        <fail message="Java Runtime version 1.6 needed. Your version is: ${java.runtime.version}">
            <condition>
                <not>
                    <contains string="${java.runtime.version}" substring="1.6" casesensitive="false"/>
                </not>
            </condition>
        </fail>

        <!-- Initialize all project directories -->
        <property file="${root.dir}/jnode.properties"/>
        <!-- Set overwritable properties -->
        <property name="jnode.memmgr.plugin.id" value="org.jnode.vm.memmgr.def"/>
        <property name="compilerarg" value="-nowarn"/>

        <!-- Derive properties -->
    	<property name="jnode-mmtk.jar" value="${root.dir}/core/build/classes-plan/${jnode.memmgr.plugin.id}"/>

    	<!-- Initialize timestamp -->
        <tstamp/>
        
    	<property name="hotswap.class.tstamp.pattern" value="MM/dd/yyyy kk:mm:ss.SSS"/>
        <tstamp>
            <format property="hotswap.class.tstamp" pattern="${hotswap.class.tstamp.pattern}" />
        </tstamp>


        <!-- Update default excludes -->
    	<defaultexcludes add="**/_svn"/>
    	<defaultexcludes add="**/_svn/**"/>
    	
        <!-- Create basic build directories -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${save.dir}"/>
        <mkdir dir="${cdroms.dir}"/>
        <mkdir dir="${descriptors.dir}"/>
        <mkdir dir="${plugins.dir}"/>
        <mkdir dir="${initjars.dir}"/>
    </target>

    <!-- Call the assemble target of all subprojects -->
    <target name="assemble-projects" depends="prepare">
        <!-- pre compile tasks needed for compilation -->
        <ant target="pre-compile" dir="${root.dir}/builder" inheritall="on" inheritrefs="on" />
        <jnode.antall target="assemble"/>
    </target>

    <!-- Assemble all plugins -->
    <target name="assemble-plugins" depends="assemble-projects,openjdk-annotate">
        <!-- Now assemble all plugins -->
        <taskdef name="plugin" classname="org.jnode.build.PluginTask" classpathref="cp-jnode"/>
        <plugin todir="${plugins.dir}" tmpdir="${build.dir}/tmp/plugins" pluginDir="${descriptors.dir}">
        	<packager userApplicationsDir="${user.applications.dir}" pathRefId="cp"/>
        	
            <libalias name="jnode-core.jar" alias="${jnode-core.jar}"/>
            <libalias name="jnode-distr.jar" alias="${jnode-distr.jar}"/>
            <libalias name="jnode-fs.jar" alias="${jnode-fs.jar}"/>
            <libalias name="jnode-gui.jar" alias="${jnode-gui.jar}"/>
            <libalias name="jnode-textui.jar" alias="${jnode-textui.jar}"/>
            <libalias name="jnode-net.jar" alias="${jnode-net.jar}"/>
            <libalias name="jnode-shell.jar" alias="${jnode-shell.jar}"/>

        	<libalias name="jnode-mmtk-genrc.jar" alias="${jnode-mmtk-genrc.jar}"/>
        	<libalias name="jnode-mmtk-ms.jar" alias="${jnode-mmtk-ms.jar}"/>
           	<libalias name="jnode-mmtk-nogc.jar" alias="${jnode-mmtk-nogc.jar}"/>

        	<libalias name="mmtk.jar" alias="${mmtk.jar}"/>

            <libalias name="commons-net-1.1.0.jar" alias="${commons-net.jar}"/>
            <libalias name="dnsjava-1.6.6.jar" alias="${dnsjava.jar}"/>
            <libalias name="jsch-0.1.24.jar" alias="${jsch.jar}"/>
            <libalias name="log4j.jar" alias="${log4j.jar}"/>
            <libalias name="beanshell.jar" alias="${beanshell.jar}"/>
            <libalias name="nanoxml-java.jar" alias="${nanoxml-java.jar}"/>
            <libalias name="js.jar" alias="${js.jar}"/>
            <libalias name="thinlet.jar" alias="${thinlet.jar}"/>

            <libalias name="junit.jar" alias="${junit.jar}"/>
            <libalias name="jmock-1.0.1.jar" alias="${jmock.jar}"/>
            <libalias name="jmock-cglib-1.0.1.jar" alias="${jmock-cglib.jar}"/>
            <libalias name="asm.jar" alias="${asm.jar}"/>
        	<libalias name="asm-attrs.jar" alias="${asm-attrs.jar}"/>
        	<libalias name="asm-util.jar" alias="${asm-util.jar}"/>
            <libalias name="cglib.jar" alias="${cglib.jar}"/>
        	<libalias name="mauve.jar" alias="${mauve.jar}"/>

            <libalias name="ant.jar" alias="${ant.jar}"/>
            <libalias name="ant-launcher.jar" alias="${ant-launcher.jar}"/>
            <libalias name="edtftpj.jar" alias="${edtftpj.jar}"/>
            <libalias name="jcifs.jar" alias="${jcifs.jar}"/>
            <libalias name="ejc.jar" alias="${ejc.jar}"/>
        	<libalias name="oncrpc.jar" alias="${oncrpc.jar}"/>
        	<libalias name="telnetd.jar" alias="${telnetd.jar}"/>
            <libalias name="commons-logging.jar" alias="${commons-logging.jar}"/>
            <libalias name="jetty.jar" alias="${jetty.jar}"/>
            <libalias name="jetty-util.jar" alias="${jetty-util.jar}"/>
            <libalias name="jsp.jar" alias="${jsp.jar}"/>
            <libalias name="jsp-api.jar" alias="${jsp-api.jar}"/>
            <libalias name="servlet.jar" alias="${servlet.jar}"/>
            <libalias name="derby.jar" alias="${derby.jar}"/>
            <libalias name="derbynet.jar" alias="${derbynet.jar}"/>
            <libalias name="derbytools.jar" alias="${derbytools.jar}"/>

            <descriptors dir="${descriptors.dir}/">
                <include name="*.xml"/>
                <exclude name="*plugin-list.xml"/>
            </descriptors>
        </plugin>
    </target>

    <!-- Assemble all default initjars -->
    <target name="assemble-default-initjars" depends="assemble-plugins" unless="no.default.initjars">
        <!-- Build all default initjar's -->
        <taskdef name="initjars" classname="org.jnode.build.InitJarsBuilder" classpathref="cp-jnode"/>
        <initjars destdir="${initjars.dir}"
            pluginDir="${plugins.dir}"
            systemPluginList="${basedir}/conf/system-plugin-list.xml">
            <insert userApplicationsDir="${user.applications.dir}"/>
                    	
            <fileset dir="${basedir}/conf">
                <exclude name="system-plugin-list.xml"/>
                <include name="*plugin-list.xml"/>
            </fileset>
        </initjars>
    </target>

    <!-- Assemble all custom initjars -->
    <target name="assemble-custom-initjars" depends="assemble-plugins" if="custom.plugin-list.dir">
        <!-- Build all custom initjar's -->
        <taskdef name="initjars" classname="org.jnode.build.InitJarsBuilder" classpathref="cp-jnode"/>
        <initjars destdir="${initjars.dir}"
            pluginDir="${plugins.dir}"
            systemPluginList="${basedir}/conf/system-plugin-list.xml">
            <fileset dir="${custom.plugin-list.dir}">
                <include name="*plugin-list.xml"/>
            </fileset>
        </initjars>
    </target>

    <!-- Assemble all subprojects, plugins and initjars -->
    <target name="assemble" depends="assemble-default-initjars, assemble-custom-initjars">
    </target>

    <!-- Give help on possible targets -->
    <target name="help" description="help on the important targets">
        <echo>
Welcome to the JNode build system.
			
You can use this build system to perform various tasks, 
by specifying one or more targets on the command line. 
See the list below for an explanation of all targets.
			
x86               Build the JNode bootable image for the X86 32-bit
                  architecture.
x86_64            Build the JNode bootable image for the X86 64-bit
                  architecture (AMD64).
			
cd-x86            Build the JNode bootable CD-ROM for the X86
                  architecture 32 and 64-bit. The CD-ROM also
                  contains the JNode sources.
cd-x86-lite       Build the JNode bootable CD-ROM for the X86
                  32-bit architecture.
cd-x86_64-lite    Build the JNode bootable CD-ROM for the X86
                  64-bit architecture.
<!--
create-patch      Create a patch file containing the differences
                  between the local sources and the cvs HEAD
                  branch.
-->        	
boot-files-winNT  Build the JNode boot files for windows NT/2K/XP
                  used together with NTLDR

encoding-test     Verify the file encoding of all java source
                  files.
encoding-fix      Correct the file encoding of all java source
                  files.
			
javadoc           Generate documentation of all java source files.
javadoc-small     Generate documentation of the basic JNode api's.

check-plugins     Run tests to check plugin dependencies.

clean             Remove all intermediate build results.
        </echo>
    </target>

    <!-- Macro used to call the x86 build script -->
    <macrodef name="x86-build">
        <attribute name="bits"/>
        <attribute name="target" default="all"/>
        <sequential>
            <ant antfile="build-x86.xml" inheritall="on" inheritrefs="on" target="@{target}">
                <property name="jnode.bits" value="@{bits}"/>
            </ant>
        </sequential>
    </macrodef>

    <!-- Create the X86 32-bit boot image -->
    <target name="x86" depends="assemble">
        <x86-build bits="32"/>
    </target>

    <!-- Create the X86 64-bit boot image-->
    <target name="x86_64" depends="assemble">
        <x86-build bits="64"/>
    </target>

    <!-- Create the JOP boot image -->
    <target name="jop" depends="assemble">
        <ant antfile="build-jop.xml" inheritall="on" inheritrefs="on"/>
    </target>

    <!-- Build the boot files for windows NT/2K/XP (with NTLDR) -->
    <target name="boot-files-winNT" depends="assemble">
        <x86-build bits="32" target="boot-files-winNT"/>
    </target>

    <!-- Create a bootable CDROM image containing all x86 bootable images and the sources -->
    <target name="cd-x86" depends="assemble" description="create a bootable JNode CD image with sources included">
        <tar destfile="${sources.dist.tar.gz}" compression="gzip" basedir="${root.dir}" excludes="*/build/**"/>
        <x86-build bits="32" target="java-image"/>
        <!-- TODO enable this when 64 bit support is working -->
        <!--x86-build bits="64" target="java-image"/-->
        <property name="jnode.bits" value="32" />
        <ant antfile="build-x86.xml" inheritall="true" inheritrefs="true" target="cdrom"/>
    </target>

    <!-- Create a bootable CDROM image for x86 32-bits -->
    <target name="cd-x86-lite" depends="assemble" description="create a bootable JNode CD image">
        <x86-build bits="32" target="java-image"/>
        <property name="jnode.bits" value="32" />
        <ant antfile="build-x86.xml" inheritall="true" inheritrefs="true" target="cdrom-lite"/>
    </target>

    <!-- Create a bootable CDROM image for x86 64-bits -->
    <target name="cd-x86_64-lite" depends="assemble">
        <x86-build bits="64" target="java-image"/>
        <property name="jnode.bits" value="64" />
        <ant antfile="build-x86.xml" inheritall="true" inheritrefs="true" target="cdrom_64-lite"/>
    </target>

    <!-- Upload a distribution -->
    <target name="upload">
        <property name="upload.dir" value="${build.dir}/upload"/>
        <mkdir dir="${upload.dir}"/>
        <gzip src="${jnode-x86.iso}" destfile="${upload.dir}/jnode-x86-${jnode-ver}.iso.gz"/>
        <copy todir="${upload.dir}" file="${sources.dist.tar.gz}"/>
        <checksum algorithm="MD5" forceoverwrite="true">
            <fileset dir="${upload.dir}">
                <include name="jnode-x86-${jnode-ver}.iso.gz" />
                <include name="jnodesources-${jnode-ver}.tar.gz" />
            </fileset>
        </checksum>
        <echo message="FTP upload disabled. Uploadables are in: ${upload.dir}"/>
        <!--
        TODO find a way to automatically upload the files 
        jsch based scp with sftp fails with an error to sourceforge
        FTP uploads are abandone by sourceforge
        <ftp server="upload.sourceforge.net" remotedir="incoming" passive="yes" newer="yes" verbose="yes" userid="anonymous" password="${user.name}@users.sourceforge.net">
            <fileset dir="${upload.dir}"/>
        </ftp>
        -->
    </target>
	
	<!-- Save virtualization etc state across 'clean' -->
	<target name="save">
	   <copy file="${cdroms.dir}/JNode.nvram" todir="${save.dir}" failonerror="no"/>
	</target>

    <!-- Clean everything files -->
    <target name="clean" depends="save" description="clean the complete build output">
        <jnode.antall target="clean"/>
        <delete dir="${build.dir}" quiet="on"/>
    </target>

    <!-- Generate only the basic api javadoc files -->
    <target name="javadoc-small" description="generate documentation of the basic JNode APIs">
        <jnode.javadoc destdir="${build.dir}/javadoc/small">
            <sourcepath>
                <pathelement location="${root.dir}/core/src/classpath/gnu"/>
                <pathelement location="${root.dir}/core/src/classpath/java"/>
                <pathelement location="${root.dir}/core/src/classpath/javax"/>
                <pathelement location="${root.dir}/core/src/classpath/ext"/>
                <pathelement location="${root.dir}/core/src/classpath/vm"/>
                <pathelement location="${root.dir}/core/src/icedtea"/>
                <pathelement location="${root.dir}/core/src/openjdk/com"/>
                <pathelement location="${root.dir}/core/src/openjdk/java"/>
                <pathelement location="${root.dir}/core/src/openjdk/javax"/>
                <pathelement location="${root.dir}/core/src/openjdk/org"/>
                <pathelement location="${root.dir}/core/src/openjdk/sun"/>
                <pathelement location="${root.dir}/core/src/openjdk/vm"/>
                <pathelement location="${root.dir}/core/src/endorsed/nanoxml"/>
                <pathelement location="${root.dir}/core/src/core"/>
                <pathelement location="${root.dir}/core/src/vmmagic"/>
                <pathelement location="${root.dir}/core/src/driver"/>
            </sourcepath>
            <package name="org.jnode.driver"/>
            <package name="org.jnode.naming"/>
            <package name="org.jnode.plugin"/>
            <package name="org.jnode.system"/>
            <bootclasspath refid="cp"/>
        </jnode.javadoc>
    </target>

    <!-- Generate only the MMTk api javadoc files -->
    <target name="javadoc-mmtk">
        <jnode.javadoc destdir="${build.dir}/javadoc/mmtk">
            <sourcepath>
                <pathelement location="${root.dir}/core/src/vmmagic"/>
                <pathelement location="${root.dir}/core/src/mmtk-vm"/>
                <pathelement location="${root.dir}/core/src/core"/>
                <pathelement location="${root.dir}/core/src/classpath/gnu"/>
                <pathelement location="${root.dir}/core/src/classpath/ext"/>
                <pathelement location="${root.dir}/core/src/classpath/vm"/>
                <pathelement location="${root.dir}/core/src/openjdk/sun"/>
                <pathelement location="${root.dir}/core/src/openjdk/vm"/>
                <pathelement location="${root.dir}/core/src/endorsed/nanoxml"/>
            </sourcepath>
            <package name="org.mmtk.*"/>
            <package name="org.jnode.vm.memmgr.mmtk.*"/>
            <package name="org.vmmagic.*"/>
            <classpath refid="cp"/>
        </jnode.javadoc>
    </target>

    <!-- Generate all javadoc files -->
    <target name="javadoc" description="generate documentation of all java source files">
        <jnode.javadoc destdir="${build.dir}/javadoc/full">
            <sourcepath>
                <pathelement location="${root.dir}/core/src/classpath/gnu"/>
                <pathelement location="${root.dir}/core/src/classpath/java"/>
                <pathelement location="${root.dir}/core/src/classpath/javax"/>
                <pathelement location="${root.dir}/core/src/classpath/ext"/>
                <pathelement location="${root.dir}/core/src/classpath/vm"/>
                <pathelement location="${root.dir}/core/src/icedtea"/>
                <pathelement location="${root.dir}/core/src/openjdk/com"/>
                <pathelement location="${root.dir}/core/src/openjdk/java"/>
                <pathelement location="${root.dir}/core/src/openjdk/javax"/>
                <pathelement location="${root.dir}/core/src/openjdk/org"/>
                <pathelement location="${root.dir}/core/src/openjdk/sun"/>
                <pathelement location="${root.dir}/core/src/openjdk/svm"/>
                <pathelement location="${root.dir}/core/src/openjdk/vm"/>
                <pathelement location="${root.dir}/core/src/core"/>
                <pathelement location="${root.dir}/core/src/driver"/>
                <pathelement location="${root.dir}/core/src/mmtk-vm"/>
                <pathelement location="${root.dir}/core/src/endorsed/nanoxml"/>
                <pathelement location="${root.dir}/core/src/test"/>
                <pathelement location="${root.dir}/core/src/vmmagic"/>
                <pathelement location="${root.dir}/distr/src/install"/>
                <pathelement location="${root.dir}/fs/src/fs"/>
                <pathelement location="${root.dir}/fs/src/fs"/>
                <pathelement location="${root.dir}/fs/src/driver"/>
                <pathelement location="${root.dir}/gui/src/awt"/>
                <pathelement location="${root.dir}/gui/src/driver"/>
                <pathelement location="${root.dir}/gui/src/desktop"/>
                <pathelement location="${root.dir}/gui/src/font"/>
                <pathelement location="${root.dir}/gui/src/thinlet"/>
                <pathelement location="${root.dir}/net/src/net"/>
                <pathelement location="${root.dir}/net/src/driver"/>
                <pathelement location="${root.dir}/shell/src/shell"/>
            </sourcepath>
            <package name="org.jnode.*"/>
            <package name="org.mmtk.*"/>
            <package name="org.vmmagic.*"/>
            <bootclasspath refid="cp"/>
        </jnode.javadoc>
    </target>

    <!-- Backup CVS files -->
    <!-- TODO create replacement SVN task
    <target name="backup">
        <mkdir dir="${backup.dir}"/>
        <tstamp>
            <format property="date" pattern="dd-MM-yyyy"/>
        </tstamp>
        <get src="http://cvs.sourceforge.net/cvstarballs/jnode-cvsroot.tar.bz2" dest="${backup.dir}/jnode-cvsroot-${date}.tar.bz2" usetimestamp="true" verbose="true"/>
    </target>
    -->

    <!-- Compare classpath version of jnode with real classpath version -->
    <target name="cp-compare" depends="assemble">
        <taskdef name="cp-compare" classname="org.jnode.ant.taskdefs.classpath.CompareTask" classpathref="cp-jnode"/>

        <patternset id="cp-includes-pattern">
            <include name="**/*.java"/>
            <include name="**/*.properties"/>
            <include name="**/package.html"/>
        </patternset>

        <patternset id="cp-sources-pattern">
            <exclude name="compat/**/*"/>
            <exclude name="examples/**/*"/>
            <exclude name="external/**/*"/>
            <exclude name="tools/**/*"/>
            <exclude name="gnu/classpath/tools/javah/**/*"/>
            <exclude name="gnu/java/awt/peer/gtk/**/*"/>
            <exclude name="gnu/java/awt/peer/qt/**/*"/>
            <exclude name="gnu/java/awt/peer/x/**/*"/>
            <exclude name="gnu/java/awt/dnd/peer/gtk/**/*"/>
            <exclude name="gnu/java/net/local/**/*"/>
            <exclude name="gnu/javax/sound/midi/alsa/**/*"/>
            <exclude name="gnu/javax/sound/midi/dssi/**/*"/>
            <exclude name="gnu/javax/swing/plaf/gtk/**/*"/>
            <exclude name="gnu/test/**/*"/>
            <exclude name="gnu/xml/libxmlj/**/*"/>
            <exclude name="resource/**/*"/>
            <exclude name="test/**/*"/>
            <exclude name="testsuite/**/*"/>
            <exclude name="vm/reference/**/*"/>
        </patternset>

        <delete dir="${build.dir}/classpath-compare"/>
        <cp-compare destdir="${build.dir}/classpath-compare" type="classpath">
            <vmsources>
                <fileset dir="${root.dir}/core/src/classpath/gnu">
                    <patternset refid="cp-includes-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/core/src/classpath/java">
                    <patternset refid="cp-includes-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/core/src/classpath/javax">
	                <patternset refid="cp-includes-pattern"/>
				</fileset>
                <fileset dir="${root.dir}/core/src/classpath/tools">
                    <patternset refid="cp-includes-pattern"/>
               	</fileset>
                <fileset dir="${root.dir}/core/src/classpath/sun">
                    <patternset refid="cp-includes-pattern"/>
               	</fileset>
            </vmsources>
            <vmspecificsources>
                <fileset dir="${root.dir}/core/src/classpath/vm">
                    <patternset refid="cp-includes-pattern"/>
               	</fileset>
            </vmspecificsources>
            <classpathsources>
                <fileset dir="${root.dir}/../classpath">
                    <patternset refid="cp-includes-pattern"/>
                    <patternset refid="cp-sources-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/../classpath/external/jsr166">
                    <patternset refid="cp-includes-pattern"/>
                    <patternset refid="cp-sources-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/../classpath/resource">
	                <patternset refid="cp-includes-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/../classpath/external/w3c_dom">
                    <patternset refid="cp-includes-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/../classpath/external/relaxngDatatype">
                    <patternset refid="cp-includes-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/../classpath/external/sax">
                    <patternset refid="cp-includes-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/../classpath/tools">
                    <patternset refid="cp-includes-pattern"/>
                    <patternset refid="cp-sources-pattern"/>
                </fileset>
                <fileset dir="${root.dir}/../classpath/tools/external/asm">
                    <patternset refid="cp-includes-pattern"/>
                    <patternset refid="cp-sources-pattern"/>
                </fileset>
            </classpathsources>
        </cp-compare>
    </target>

    <!-- Compare classpath version of jnode with real classpath version -->
    <target name="header-fix" depends="assemble">
        <!-- todo clean up the excludes -->
        <taskdef name="header" classname="org.jnode.ant.taskdefs.HeaderTask" classpathref="cp-jnode"/>

        <header update="on" headerFile="${root.dir}/all/template/header.txt">
            <fileset dir="${root.dir}/builder/src/builder" includes="**/*.java"/>
            <fileset dir="${root.dir}/core/src/classpath/ext" includes="**/*.java"/>
            <fileset dir="${root.dir}/core/src/classpath/vm" includes="**/*.java"
                    excludes="gnu/classpath/jdwp/VMFrame.java,
                               gnu/classpath/jdwp/VMIdManager.java,
                               gnu/classpath/jdwp/VMMethod.java,
                               gnu/classpath/jdwp/VMVirtualMachine.java,
                               gnu/classpath/VMStackWalker.java,
                               gnu/java/lang/VMInstrumentationImpl.java,
                               gnu/java/nio/VMChannel.java,
                               java/lang/Thread.java,
                               java/lang/VMProcess.java,
                               java/lang/VMSystem.java"/>
            <fileset dir="${root.dir}/core/src/openjdk/vm" includes="**/*.java" excludes="java/lang/NativeStrictMath.java"/>
            <fileset dir="${root.dir}/core/src/core" includes="**/*.java" excludes="org/jnode/imageio/jpeg/JPEGDecoder"/>
            <fileset dir="${root.dir}/core/src/mmtk-vm" includes="**/*.java" excludes="org/mmtk/vm/**/*.java"/>
            <fileset dir="${root.dir}/core/src/driver" includes="**/*.java"/>
            <fileset dir="${root.dir}/core/src/test" includes="**/*.java" excludes="org/jnode/test/mauve/**/*.java,org/jtestserver/**/*.java"/>
            <fileset dir="${root.dir}/distr/src/install" includes="**/*.java"/>
            <fileset dir="${root.dir}/distr/src/apps" includes="**/*.java"/>
            <fileset dir="${root.dir}/distr/src/emu" includes="**/*.java"/>
            <fileset dir="${root.dir}/distr/src/test" includes="**/*.java"/>
            <fileset dir="${root.dir}/fs/src/fs" includes="**/*.java"/>
            <fileset dir="${root.dir}/fs/src/driver" includes="**/*.java"/>
            <fileset dir="${root.dir}/fs/src/test" includes="**/*.java"/>
            <fileset dir="${root.dir}/gui/src/awt" includes="**/*.java" excludes="org/jnode/awt/font/bdf/**/*.java"/>
            <fileset dir="${root.dir}/gui/src/desktop" includes="**/*.java"/>
            <fileset dir="${root.dir}/gui/src/driver" includes="**/*.java"/>
            <fileset dir="${root.dir}/gui/src/test" includes="**/*.java"/>
            <fileset dir="${root.dir}/net/src/net" includes="**/*.java"/>
            <fileset dir="${root.dir}/net/src/driver" includes="**/*.java"/>
            <fileset dir="${root.dir}/net/src/test" includes="**/*.java"/>
            <fileset dir="${root.dir}/shell/src/emu" includes="**/*.java"/>
            <fileset dir="${root.dir}/shell/src/shell" includes="**/*.java"/>
            <fileset dir="${root.dir}/shell/src/test" includes="**/*.java"/>
        </header>
    </target>

    <target name="check-debugger-properties" depends="prepare">
        <fail message="Please set jnode.debugger.host property in jnode.properties." unless="jnode.debugger.host"/>
        <fail message="Please set jnode.debugger.port property in jnode.properties." unless="jnode.debugger.port"/>        
    </target>

    <target name="hotswap" depends="check-debugger-properties,assemble-projects" description="hotswap the modified classes">
      <taskdef name="hotswap" classname="org.jnode.ant.taskdefs.Hotswap" classpathref="cp-jnode" />
      <hotswap verbose="true" host="${jnode.debugger.host}" port="${jnode.debugger.port}">
        <fileset dir="../core/build/classes/" includes="**/*.class">
          <date datetime="${hotswap.class.tstamp}" pattern="MM/dd/yyyy kk:mm:ss" when="after" granularity="0"/>
        </fileset>
        <fileset dir="../distr/build/classes/" includes="**/*.class">
          <date datetime="${hotswap.class.tstamp}" pattern="MM/dd/yyyy kk:mm:ss" when="after" granularity="0"/>
        </fileset>
        <fileset dir="../fs/build/classes/" includes="**/*.class">
          <date datetime="${hotswap.class.tstamp}" pattern="MM/dd/yyyy kk:mm:ss" when="after" granularity="0"/>
        </fileset>
        <fileset dir="../gui/build/classes/" includes="**/*.class">
          <date datetime="${hotswap.class.tstamp}" pattern="MM/dd/yyyy kk:mm:ss" when="after" granularity="0"/>
        </fileset>
        <fileset dir="../net/build/classes/" includes="**/*.class">
          <date datetime="${hotswap.class.tstamp}" pattern="MM/dd/yyyy kk:mm:ss" when="after" granularity="0"/>
        </fileset>
        <fileset dir="../shell/build/classes/" includes="**/*.class">
          <date datetime="${hotswap.class.tstamp}" pattern="MM/dd/yyyy kk:mm:ss" when="after" granularity="0"/>
        </fileset>
        <fileset dir="../textui/build/classes/" includes="**/*.class">
          <date datetime="${hotswap.class.tstamp}" pattern="MM/dd/yyyy kk:mm:ss" when="after" granularity="0"/>
        </fileset>
      </hotswap>
    </target>

    <target name="oj-compare" depends="assemble">
            <taskdef name="cp-compare" classname="org.jnode.ant.taskdefs.classpath.CompareTask" classpathref="cp-jnode"/>

            <patternset id="cp-includes-pattern">
                <include name="**/*.java"/>
                <include name="**/*.properties"/>
                <include name="**/package.html"/>
            </patternset>

            <patternset id="cp-sources-pattern">
                <exclude name="com/sun/demo/**/*"/>
                <exclude name="com/sun/tools/hat/**/*"/>
                <exclude name="com/sun/tools/example/**/*"/>
                <exclude name="com/sun/tools/javah/**/*"/>
                <exclude name="com/sun/tools/internal/txw2/**/*"/>
                <exclude name="sun/jvmstat/**/*"/>
                <exclude name="sun/tools/attach/**/*"/>
                <exclude name="sun/tools/jinfo/**/*"/>
                <exclude name="sun/tools/jps/**/*"/>
                <exclude name="sun/tools/jmap/**/*"/>
                <exclude name="sun/tools/jstack/**/*"/>
                <exclude name="sun/tools/jstat/**/*"/>
                <exclude name="sun/tools/jstatd/**/*"/>
                <exclude name="sun/tools/jconsole/**/*"/>
            </patternset>

            <delete dir="${build.dir}/openjdk-compare"/>
            <cp-compare destdir="${build.dir}/openjdk-compare" type="openjdk">
                <vmsources>
                    <fileset dir="${root.dir}/core/src/openjdk/com">
                        <patternset refid="cp-includes-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/core/src/openjdk/java">
                        <patternset refid="cp-includes-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/core/src/openjdk/javax">
                        <patternset refid="cp-includes-pattern"/>
                    </fileset>

                    <fileset dir="${root.dir}/core/src/openjdk/org">
                        <patternset refid="cp-includes-pattern"/>
                    </fileset>

                    <fileset dir="${root.dir}/core/src/openjdk/sun">
                        <patternset refid="cp-includes-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/core/src/openjdk/jaxws">
                        <patternset refid="cp-includes-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/core/src/openjdk/langtools">
                        <patternset refid="cp-includes-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/core/src/openjdk/corba">
                        <patternset refid="cp-includes-pattern"/>
                    </fileset>
                </vmsources>
                <vmspecificsources>
                    <fileset dir="${root.dir}/core/src/openjdk/vm">
                        <patternset refid="cp-includes-pattern"/>
                       </fileset>
                </vmspecificsources>
                <classpathsources>
                    <fileset dir="${root.dir}/../openjdk/jdk/src/share/classes/">
                        <patternset refid="cp-includes-pattern"/>
                        <patternset refid="cp-sources-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/../openjdk/corba/src/share/classes/">
                        <patternset refid="cp-includes-pattern"/>
                        <patternset refid="cp-sources-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/../openjdk/jaxp/src/share/classes/">
                        <patternset refid="cp-includes-pattern"/>
                        <patternset refid="cp-sources-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/../openjdk/jaxws/src/share/classes/">
                        <patternset refid="cp-includes-pattern"/>
                        <patternset refid="cp-sources-pattern"/>
                    </fileset>
                    <fileset dir="${root.dir}/../openjdk/langtools/src/share/classes/">
                        <patternset refid="cp-includes-pattern"/>
                        <patternset refid="cp-sources-pattern"/>
                    </fileset>
                </classpathsources>
            </cp-compare>
        </target>

    <target name="openjdk-annotate" depends="assemble-projects">
        <taskdef name="oj-annotate" classname="org.jnode.ant.taskdefs.AnnotateTask" 
        		classpathref="cp-jnode"/>

        <oj-annotate annotationFile="${root.dir}/all/conf/openjdk-annotations.properties"
        			 buildStartTime="${hotswap.class.tstamp}"
                     pattern="${hotswap.class.tstamp.pattern}"
        			 trace="false"
                     failonerror="true"
                     basedir="${root.dir}/core/build/classes"/>
    </target>

	<!-- check that all native methods are properly implemented for JNode -->
    <target name="native-method-check" depends="assemble-projects">
    	<echo message="native-method-check"/>
        <taskdef name="native-check" classname="org.jnode.ant.taskdefs.NativeCheckTask" 
        		classpathref="cp-jnode"/>

        <native-check trace="false" failonerror="false">
            <fileset dir="${root.dir}/core/build/classes">
                <patternset includes="**/*.class"/>
            </fileset>        	
        </native-check>
    </target>

    <!-- Run all tests -->
    <target name="tests" depends="assemble">
        <ant target="tests" dir="${root.dir}/fs" inheritall="on" inheritrefs="on"/>
    </target>

    <!-- Check the encoding of all files -->
    <target name="encoding-test" depends="assemble">
        <taskdef name="n2a" classname="org.jnode.ant.taskdefs.Native2AsciiTask" classpathref="cp-jnode"/>

        <n2a update="off">
            <fileset dir="${root.dir}" includes="**/*.java"/>
        </n2a>
    </target>

    <!-- Check and fix the encoding of all files -->
    <target name="encoding-fix" depends="assemble">
        <taskdef name="n2a" classname="org.jnode.ant.taskdefs.Native2AsciiTask" classpathref="cp-jnode"/>

        <n2a update="on">
            <fileset dir="${root.dir}" includes="**/*.java"/>
        </n2a>
    </target>

	<!-- check plugin dependencies -->
	<target name="check-plugins" depends="assemble-plugins">
		<!-- Check all plugins -->
		<taskdef name="checkDeps" classname="org.jnode.build.dependencies.BCELDependencyChecker" 
			classpathref="cp-jnode" />
        <!--
        TODO: remove duplicate classes from mmtk related plugins and enable their checking. 
        -->
        <checkDeps>
			<plugins dir="${plugins.dir}/">
				<include name="*.jar" />
                <exclude name="*mmtk*.jar" />
            </plugins>
			
			<descriptors dir="${descriptors.dir}/">
				<include name="*.xml" />
				<exclude name="*plugin-list.xml" />
                <exclude name="*mmtk*.xml" />
            </descriptors>
		</checkDeps>
	</target>

    <!-- Define the task that check the rules -->
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
        classpathref="cp-jnode">
        <classpath>
            <pathelement location="${pmd.jar}"/>
            <pathelement location="${jaxen.jar}"/>
            <pathelement location="${saxpath.jar}"/>
            <pathelement location="${xerces.jar}"/>
            <pathelement location="${xmlParserAPIs.jar}"/>
        </classpath>
    </taskdef>


    <!-- Macro used to check that the rules are applied in the source code -->
    <macrodef name="checkProjectRules">
        <attribute name="projectName"/>
        <attribute name="webSrcUrl"/>
        <attribute name="projectSrc"/>
        <sequential>
            <property name="nbFailures" value="0"/>
            <echo message="Scanning @{projectName}."/>
            <property name="tmp" value="../@{projectSrc}"/>
            <pmd failuresPropertyName="nbFailures">
                <formatter type="html" toFile="${reports.dir}/pmd_report-@{projectName}.html"/>

                <ruleset>rulesets/favorites.xml</ruleset>
                <ruleset>rulesets/basic.xml</ruleset>

                <fileset dir="../@{projectSrc}" includes="**/*.java"/>
            </pmd>
            <echo message="There was ${nbFailures} failures in @{projectName}."/>
        </sequential>
    </macrodef>

    <target name="checkJNodeRules" depends="prepare">
        <parallel>
            <checkProjectRules projectName="distr" webSrcUrl="distr" projectSrc="distr"/>
            <checkProjectRules projectName="JNode-Builder" webSrcUrl="builder" projectSrc="builder"/>
            <checkProjectRules projectName="JNode-Core" webSrcUrl="core" projectSrc="core"/>
            <checkProjectRules projectName="JNode-FS" webSrcUrl="fs" projectSrc="fs"/>
            <checkProjectRules projectName="JNode-GUI" webSrcUrl="gui" projectSrc="gui"/>
            <checkProjectRules projectName="JNode-Net" webSrcUrl="net" projectSrc="net"/>
            <checkProjectRules projectName="JNode-Shell" webSrcUrl="shell" projectSrc="shell"/>
            <checkProjectRules projectName="JNode-TestUI" webSrcUrl="textui" projectSrc="textui"/>
        </parallel>
    </target>

    <!-- Document all plugins -->
    <target name="document-plugins" depends="assemble-projects">
        <taskdef name="plugindocumentation" classname="org.jnode.build.documentation.PluginDocumentationTask" classpathref="cp-jnode"/>

        <plugindocumentation
            destdir="${reports.dir}/plugins"
            pluginDir="${descriptors.dir}"
            tree="${jnode.plugin.doc.tree}">
            <descriptors dir="${descriptors.dir}/">
                <include name="*.xml"/>
                <exclude name="*plugin-list.xml"/>
            </descriptors>
        </plugindocumentation>

    </target>

    <target name="checkstyle" description="check the mandatory code conventions">
        <taskdef resource="checkstyletask.properties" classpath="../core/lib/checkstyle-all-4.4.jar"/>
        <checkstyle config="jnode_checks.xml">
            <fileset dir="../builder/src/builder" includes="**/*.java"/>
            <fileset dir="../builder/src/configure" includes="**/*.java"/>
            <fileset dir="../core/src/core" includes="**/*.java"/>
            <fileset dir="../core/src/driver" includes="**/*.java"/>
            <fileset dir="../core/src/test" includes="**/*.java"/>
            <fileset dir="../distr/src/apps" includes="**/*.java"/>
            <fileset dir="../distr/src/emu" includes="**/*.java"/>
            <fileset dir="../distr/src/install" includes="**/*.java"/>
            <fileset dir="../distr/src/test" includes="**/*.java"/>
            <fileset dir="../fs/src/fs" includes="**/*.java"/>
            <fileset dir="../fs/src/driver" includes="**/*.java"/>
            <fileset dir="../fs/src/test" includes="**/*.java"/>
            <fileset dir="../gui/src/test" includes="**/*.java"/>
            <fileset dir="../gui/src/desktop" includes="**/*.java"/>
            <fileset dir="../gui/src/driver" includes="**/*.java"/>
            <fileset dir="../gui/src/awt" includes="**/*.java"/>
            <fileset dir="../net/src/net" includes="**/*.java"/>
            <fileset dir="../net/src/driver" includes="**/*.java"/>
            <fileset dir="../net/src/test" includes="**/*.java"/>
            <fileset dir="../shell/src/test" includes="**/*.java"/>
            <fileset dir="../shell/src/shell" includes="**/*.java"/>
        </checkstyle>
    </target>

    <target name="checkstyle-new" description="check the recommanded code conventions">
        <taskdef resource="checkstyletask.properties" classpath="../core/lib/checkstyle-all-4.4.jar"/>
        <checkstyle config="new_checks.xml">
            <!--
            <fileset dir="../builder/src/builder" includes="**/*.java"/>
            <fileset dir="../builder/src/configure" includes="**/*.java"/>
            <fileset dir="../core/src/core" includes="**/*.java"/>
            <fileset dir="../core/src/driver" includes="**/*.java"/>
            <fileset dir="../core/src/test" includes="**/*.java"/>
            -->
            <fileset dir="../distr/src/apps" includes="**/*.java"/>
            <fileset dir="../distr/src/emu" includes="**/*.java"/>
            <fileset dir="../distr/src/install" includes="**/*.java"/>
            <fileset dir="../distr/src/test" includes="**/*.java"/>
            <!--
            <fileset dir="../fs/src/fs" includes="**/*.java"/>
            <fileset dir="../fs/src/driver" includes="**/*.java"/>
            <fileset dir="../fs/src/test" includes="**/*.java"/>
            <fileset dir="../gui/src/test" includes="**/*.java"/>
            <fileset dir="../gui/src/desktop" includes="**/*.java"/>
            <fileset dir="../gui/src/driver" includes="**/*.java"/>
            <fileset dir="../gui/src/awt" includes="**/*.java"/>
            <fileset dir="../net/src/net" includes="**/*.java"/>
            <fileset dir="../net/src/driver" includes="**/*.java"/>
            <fileset dir="../net/src/test" includes="**/*.java"/>
            <fileset dir="../shell/src/test" includes="**/*.java"/>
            <fileset dir="../shell/src/shell" includes="**/*.java"/>
            -->
        </checkstyle>
    </target>

  <target name="findbugs" depends="assemble-plugins">
    <taskdef name="findbugs" classpath="../core/lib/findbugs/lib/findbugs-ant.jar"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
    <findbugs home="../core/lib/findbugs/" output="html" outputFile="./build/findbugs.html" >
      <auxclasspath>
          <pathelement location="./build/plugins/rt_${jnode-ver}.jar" />
          <pathelement location="./build/plugins/org.classpath.ext.core_${jnode-ver}.jar" />
          <pathelement location="./build/plugins/nanoxml_1.4.jar" />
          <pathelement location="${nanoxml-java.jar}" />
          <pathelement location="${log4j.jar}" />
      </auxclasspath>
      <sourcepath>
          <pathelement path="../core/src/core/"/>
      </sourcepath>
      <class location="./build/plugins/org.jnode.vm_${jnode-ver}.jar"/>
      <class location="./build/plugins/org.jnode.vm.core_${jnode-ver}.jar"/>
      <class location="./build/plugins/org.jnode.vm.memmgr.def_${jnode-ver}.jar"/>
      <class location="./build/plugins/org.jnode.driver_${jnode-ver}.jar"/>
      <class location="./build/plugins/org.jnode.runtime_${jnode-ver}.jar"/>
      <class location="./build/plugins/org.jnode.runtime.core_${jnode-ver}.jar"/>
      <class location="./build/plugins/org.jnode.util_${jnode-ver}.jar"/>
      <class location="./build/plugins/org.jnode.work_${jnode-ver}.jar"/>
      <class location="./build/plugins/org.jnode.security_${jnode-ver}.jar"/>
    </findbugs>
  </target>

    <!-- Create a patch -->
    <!-- TODO create replacement SVN task
    <target name="create-patch">
        <property name="patch.file" value="${root.dir}/patch.txt"/>             
		<echo>Creating patch in ${patch.file}</echo>
		<cvs output="${patch.file}" dest="${root.dir}">
		    <commandline>
		        <argument line="-q diff -u -N"/>
		    </commandline>
		</cvs>
	</target>
	-->
</project>
