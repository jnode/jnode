<project name="JNode" default="all" basedir=".">

  <property name="root.dir"            value="${basedir}/.."/>
  <property name="build.dir"           value="${basedir}/build"/>
  <property name="descriptors.dir"     value="${build.dir}/descriptors"/>
  <property name="plugins.dir"         value="${build.dir}/plugins"/>
  <property name="initjars.dir"        value="${build.dir}/initjars"/>
  <property	name="backup.dir"          value="${build.dir}/backup"/>
     
  <property name="jnode-builder.jar"   value="${build.dir}/descriptors/jnode-builder.jar"/>
  <property name="jnode-core.jar"      value="${root.dir}/core/build/classes"/>
  <property name="jnode-fs.jar"        value="${root.dir}/fs/build/classes"/>
  <property name="jnode-gui.jar"       value="${root.dir}/gui/build/classes"/>
  <property name="jnode-net.jar"       value="${root.dir}/net/build/classes"/>
  <property name="jnode-shell.jar"     value="${root.dir}/shell/build/classes"/>
  <property name="jnode-fonts.jar"     value="${build.dir}/descriptors/jnode-fonts.jar"/>

  <property name="ant.jar"             value="${root.dir}/core/lib/ant.jar"/>
  <property name="commons-net.jar"     value="${root.dir}/net/lib/commons-net-1.1.0.jar"/>
  <property name="dnsjava.jar"         value="${root.dir}/net/lib/dnsjava-1.5.0.jar"/>
  <property name="junit.jar"           value="${root.dir}/core/lib/junit.jar"/>
  <property name="dom4j.jar"           value="${root.dir}/builder/lib/dom4j.jar"/>
  <property name="log4j.jar"           value="${root.dir}/core/lib/log4j-1.2.8.jar"/>
  <property name="nanoxml.jar"         value="${root.dir}/core/lib/nanoxml-lite-2.2.3.jar"/>
  <property name="beanshell.jar"         value="${root.dir}/shell/lib/bsh-2.0b1.jar"/>

  <property name="full-plugin-list"    value="${basedir}/conf/full-plugin-list.xml"/>
  <property name="system-plugin-list"  value="${basedir}/conf/system-plugin-list.xml"/>
  <property name="jnode-ver"           value="0.1.5"/>

  <path id="cp">
    <pathelement location="${ant.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${log4j.jar}"/>
    <pathelement location="${nanoxml.jar}"/>
    <pathelement location="${basedir}/conf"/>
    <pathelement location="${beanshell.jar}"/>
  </path>
  
  <path id="cp-jnode">
    <pathelement location="${jnode-builder.jar}"/>
    <pathelement location="${jnode-core.jar}"/>
    <pathelement location="${jnode-fs.jar}"/>
    <pathelement location="${jnode-shell.jar}"/>
    <pathelement location="${jnode-net.jar}"/>
    <pathelement location="${jnode-gui.jar}"/>
    <path refid="cp"/>
  </path>
  
  
  <filterset id="descriptors-filter">
    <filter token="PROVIDER" value="JNode.org"/>
	<filter token="VERSION" value="${jnode-ver}"/>
  </filterset>

  <patternset id="exts">
    <include name="**/*.dat"/>
    <include name="**/*.ids"/>
    <include name="**/*.properties"/>
    <include name="**/*.xml"/>
  </patternset>

<!-- Initialize all project directories -->
  <target name="prepare">
    <tstamp/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${descriptors.dir}"/>
    <mkdir dir="${plugins.dir}"/>
    <mkdir dir="${initjars.dir}"/>
  </target>

<!-- Assemble all subproject jar files -->
  <target name="assemble" depends="prepare">
    <ant target="assemble" dir="${root.dir}/core" inheritall="on" inheritrefs="on"/>
    <ant target="assemble" dir="${root.dir}/shell" inheritall="on" inheritrefs="on"/>
    <ant target="assemble" dir="${root.dir}/fs" inheritall="on" inheritrefs="on"/>
    <ant target="assemble" dir="${root.dir}/gui" inheritall="on" inheritrefs="on"/>
    <ant target="assemble" dir="${root.dir}/net" inheritall="on" inheritrefs="on"/>
    <ant target="assemble" dir="${root.dir}/builder" inheritall="on" inheritrefs="on"/>

    <!-- Now assemble all plugins -->
    <taskdef name="plugin" classname="org.jnode.build.PluginTask" classpathref="cp-jnode"/>
    <plugin todir="${plugins.dir}"
            tmpdir="${build.dir}/tmp/plugins"
            pluginDir="${descriptors.dir}">
      <libalias name="jnode-core.jar" alias="${jnode-core.jar}"/>
      <libalias name="jnode-fs.jar" alias="${jnode-fs.jar}"/>
      <libalias name="jnode-gui.jar" alias="${jnode-gui.jar}"/>
      <libalias name="jnode-net.jar" alias="${jnode-net.jar}"/>
      <libalias name="jnode-shell.jar" alias="${jnode-shell.jar}"/>

      <libalias name="commons-net-1.1.0.jar" alias="${commons-net.jar}"/>
      <libalias name="dnsjava-1.5.0.jar" alias="${dnsjava.jar}"/>
      <libalias name="nanoxml.jar" alias="${nanoxml.jar}"/>
      <libalias name="log4j.jar" alias="${log4j.jar}"/>
       <libalias name="beanshell.jar" alias="${beanshell.jar}"/>
      <libalias name="lw.jar" alias="${lw.jar}"/>
      <libalias name="junit.jar" alias="${junit.jar}"/>
      <descriptors dir="${descriptors.dir}/">
        <include name="*.xml"/>
        <exclude name="*plugin-list.xml"/>
      </descriptors>
    </plugin>

    <!-- Build all initjar's -->
    <taskdef name="initjar" classname="org.jnode.build.InitJarBuilder" classpathref="cp-jnode"/>    
    <initjar destfile="${initjars.dir}/full.jgz"
             pluginList="${basedir}/conf/full-plugin-list.xml"
             pluginDir="${plugins.dir}">
    </initjar>
  </target>

<!-- Create the X86 boot image-->
  <target name="arch-x86" depends="assemble">
    <ant antfile="build-x86.xml" inheritall="on" inheritrefs="on"/>
  </target>

<!-- Build all -->
  <target name="all" depends="arch-x86">
  </target>

<!-- Create a bootable CDROM image -->
  <target name="cdrom" depends="assemble">
    <ant antfile="build-x86.xml"
         inheritall="true"
         inheritrefs="true"
         target="cdrom"/>
  </target>

<!-- Create a bootable CDROM image -->
  <target name="cdrom-lite" depends="assemble">
    <ant antfile="build-x86.xml"
         inheritall="true"
         inheritrefs="true"
         target="cdrom-lite"/>
  </target>

  <!-- Upload a distribution -->
  <target name="upload" depends="cdrom">
    <gzip src="${build.dir}/jnode.iso"
          zipfile="${build.dir}/jnode-${jnode-ver}.iso.gz"/>
    <ftp server="upload.sourceforge.net"
         remotedir="incoming"
         passive="yes"
         newer="yes"
         verbose="yes"
         userid="ftp"
         password="ftp">
      <fileset dir="${build.dir}">
        <include name="jnode-${jnode-ver}.iso.gz"/>
      </fileset>
    </ftp>
  </target>
  
<!-- Clean everything files -->
  <target name="clean">
    <ant target="clean" dir="${root.dir}/core" inheritall="on" inheritrefs="on"/>
    <ant target="clean" dir="${root.dir}/shell" inheritall="on" inheritrefs="on"/>
    <ant target="clean" dir="${root.dir}/fs" inheritall="on" inheritrefs="on"/>
    <ant target="clean" dir="${root.dir}/gui" inheritall="on" inheritrefs="on"/>
    <ant target="clean" dir="${root.dir}/net" inheritall="on" inheritrefs="on"/>
    <ant target="clean" dir="${root.dir}/builder" inheritall="on" inheritrefs="on"/>
    <delete dir="${build.dir}" quiet="on"/>
  </target>

<!-- javadoc-small -->
  <target name="javadoc-small">
    <mkdir dir="${build.dir}/javadoc/small"/>
	<javadoc destdir="${build.dir}/javadoc/small"
	         author="true"
    	     version="true"
        	 use="true"
	         windowtitle="JNode Key Packages">
	         
	  <sourcepath>
	    <pathelement location="${root.dir}/core/src/classpath/gnu"/>
	    <pathelement location="${root.dir}/core/src/classpath/java"/>
	    <pathelement location="${root.dir}/core/src/classpath/javax"/>
	    <pathelement location="${root.dir}/core/src/classpath/org"/>
	    <pathelement location="${root.dir}/core/src/core"/>
	    <pathelement location="${root.dir}/core/src/driver"/>
	  </sourcepath>
	  <package name="org.jnode.driver"/>
	  <package name="org.jnode.naming"/>
	  <package name="org.jnode.plugin"/>
	  <package name="org.jnode.system"/>
	  <classpath refid="cp"/>
	  <bootclasspath refid="cp"/>

      <group title="JNode" packages="org.jnode.*"/>
      <group title="Classpath" packages="java.*,javax.*,gnu.*"/>
      <!-- link href="http://jnode.org"/ -->
    </javadoc>
  </target>

<!-- javadoc-full -->
  <target name="javadoc-full">
    <mkdir dir="${build.dir}/javadoc/full"/>
	<javadoc destdir="${build.dir}/javadoc/full"
	         author="true"
    	     version="true"
        	 use="true"
	         windowtitle="All JNode Packages">
	         
	  <sourcepath>
	    <pathelement location="${root.dir}/core/src/classpath/gnu"/>
	    <pathelement location="${root.dir}/core/src/classpath/java"/>
	    <pathelement location="${root.dir}/core/src/classpath/javax"/>
	    <pathelement location="${root.dir}/core/src/classpath/org"/>
	    <pathelement location="${root.dir}/core/src/core"/>
	    <pathelement location="${root.dir}/core/src/driver"/>
	    <pathelement location="${root.dir}/fs/src/fs"/>
	    <pathelement location="${root.dir}/fs/src/driver"/>
	    <pathelement location="${root.dir}/gui/src/awt"/>
	    <pathelement location="${root.dir}/gui/src/driver"/>
	    <pathelement location="${root.dir}/net/src/net"/>
	    <pathelement location="${root.dir}/net/src/driver"/>
	    <pathelement location="${root.dir}/shell/src/shell"/>
	  </sourcepath>
	  <package name="org.jnode.*"/>
	  <classpath refid="cp"/>
	  <bootclasspath refid="cp"/>

      <group title="JNode" packages="org.jnode.*"/>
      <group title="Classpath" packages="java.*,javax.*,gnu.*"/>
      <!-- link href="http://jnode.org"/ -->
    </javadoc>
  </target>

<!-- website -->
  <target name="website" depends="javadoc-small,assemble">
    <ant antfile="build-x86.xml"
         inheritall="true"
         inheritrefs="true"
         target="shell-usage"/>
    <ant dir="${root.dir}/docs" inheritall="on" inheritrefs="on"/>
  </target>

<!-- Upload website -->
  <target name="wsupload" depends="website">
    <ant target="wsupload" dir="${root.dir}/docs" inheritall="on" inheritrefs="on"/>
  </target>

<!-- Backup CVS files -->
 <target name="backup">
    <mkdir dir="${backup.dir}"/>
    <tstamp>
      <format property="date" pattern="dd-MM-yyyy"/>
    </tstamp>
    <get src="http://cvs.sourceforge.net/cvstarballs/jnode-cvsroot.tar.bz2" 
         dest="${backup.dir}/jnode-cvsroot-${date}.tar.bz2" 
         usetimestamp="true"
         verbose="true"/>  
  </target>
  
 </project>


