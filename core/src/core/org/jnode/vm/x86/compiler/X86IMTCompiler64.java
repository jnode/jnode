/*
 * $Id$
 */
package org.jnode.vm.x86.compiler;

import org.jnode.assembler.ObjectResolver;
import org.jnode.assembler.x86.X86Assembler;
import org.jnode.assembler.x86.X86Register;
import org.jnode.assembler.x86.X86Register.GPR;
import org.jnode.vm.classmgr.ObjectLayout;
import org.jnode.vm.classmgr.TIBLayout;
import org.jnode.vm.classmgr.VmArray;
import org.jnode.vm.classmgr.VmClassLoader;
import org.jnode.vm.classmgr.VmMethod;
import org.jnode.vm.compiler.CompiledIMT;
import org.jnode.vm.compiler.IMTCompiler;

/**
 * @author Ewout Prangsma (epr@users.sourceforge.net)
 */
public final class X86IMTCompiler64 extends IMTCompiler implements
		X86CompilerConstants {

	/** Register that holds the selector */
	public static final X86Register SELECTOR_REG = X86Register.RDX;

	/** Size in bytes of an entry in the IMT jump table generated by this method. */
	private static final int IMT_ENTRY_SIZE = 9; // TODO fix me when implemented
	
	public CompiledIMT compile(ObjectResolver resolver, Object[] imt,
			boolean[] imtCollisions) {
		// TODO implement me
		return new X86CompiledIMT(new byte[4]);
	}

	public void initialize(VmClassLoader loader) {
		// TODO Auto-generated method stub

	}
	/**
	 * Generate the actual invocation code of an interface method.
	 * Inputs:
	 *   RDI statics table (RDI is preserved)
	 *   RAX object to invoke method on (RAX is destroyed)
	 *   RDX is destroyed
	 * @param os
	 */
	public static void emitInvokeInterface(X86Assembler os, VmMethod method) {
		final int selector = method.getSelector();
		final int index = selector % ObjectLayout.IMT_LENGTH;
		final int offset = (VmArray.DATA_OFFSET * 8) + (index * IMT_ENTRY_SIZE);
		
		final GPR rax = X86Register.RAX;
		final GPR rdx = X86Register.RDX;
		
		// Get tib into RAX
		os.writeMOV(BITS64, rax, rax, ObjectLayout.TIB_SLOT * 8);
		// Get selector into RDX
		os.writeMOV_Const(rdx, selector);
		// Get compiled IMT into EAX
		os.writeMOV(BITS64, rax, rax, (TIBLayout.COMPILED_IMT_INDEX + VmArray.DATA_OFFSET) * 8);
		// Call to offset within compiled IMT
		os.writeLEA(rax, rax, offset);
		os.writeCALL(rax);
	}	
}
