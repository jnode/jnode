/*
 * Copyright 2000-2005 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
 */
package sun.applet.resources;

import java.util.ListResourceBundle;

public class MsgAppletViewer_de extends ListResourceBundle {

    public Object[][] getContents() {
        return new Object[][] {
            {"textframe.button.dismiss", "Ignorieren"},
            {"appletviewer.tool.title", "Applet-Ansicht: {0}"},
            {"appletviewer.menu.applet", "Applet"},
            {"appletviewer.menuitem.restart", "Neu starten"},
            {"appletviewer.menuitem.reload", "Neu laden"},
            {"appletviewer.menuitem.stop", "Abbrechen"},
            {"appletviewer.menuitem.save", "Speichern..."},
            {"appletviewer.menuitem.start", "Starten"},
            {"appletviewer.menuitem.clone", "Klonen..."},
            {"appletviewer.menuitem.tag", "Markieren..."},
            {"appletviewer.menuitem.info", "Info..."},
            {"appletviewer.menuitem.edit", "Bearbeiten"},
            {"appletviewer.menuitem.encoding", "Zeichencodierung"},
            {"appletviewer.menuitem.print", "Drucken..."},
            {"appletviewer.menuitem.props", "Eigenschaften..."},
            {"appletviewer.menuitem.close", "Schlie\u00dfen"},
            {"appletviewer.menuitem.quit", "Beenden"},
            {"appletviewer.label.hello", "Willkommen..."},
            {"appletviewer.status.start", "Starte Applet..."},
            {"appletviewer.appletsave.filedialogtitle","Applet in Datei serialisieren"},
            {"appletviewer.appletsave.err1", "Serialisiere {0} zu {1}"},
            {"appletviewer.appletsave.err2", "In appletSave: {0}"},
            {"appletviewer.applettag", "Angezeigte Marke"},
            {"appletviewer.applettag.textframe", "Applet-HTML-Marke"},
            {"appletviewer.appletinfo.applet", "-- Keine Applet-Info --"},
            {"appletviewer.appletinfo.param", "-- Keine Parameter-Info --"},
            {"appletviewer.appletinfo.textframe", "Applet-Info"},
            {"appletviewer.appletprint.fail", "Drucken fehlgeschlagen"},
            {"appletviewer.appletprint.finish", "Drucken beendet"},
            {"appletviewer.appletprint.cancel", "Drucken abgebrochen"},
            {"appletviewer.appletencoding", "Zeichencodierung: {0}"},
            {"appletviewer.parse.warning.requiresname", "Warnung: <param name=... value=...>-Marke erfordert Namensattribut."},
            {"appletviewer.parse.warning.paramoutside", "Warnung: <param>-Marke au\u00dferhalb <applet> ... </applet>."},
            {"appletviewer.parse.warning.applet.requirescode", "Warnung: <applet>-Marke erfordert Code-Attribut."},
            {"appletviewer.parse.warning.applet.requiresheight", "Warnung: <applet>-Marke erfordert H\u00f6henattribut."},
            {"appletviewer.parse.warning.applet.requireswidth", "Warnung: <applet>-Marke erfordert Breitenattribut."},
            {"appletviewer.parse.warning.object.requirescode", "Warnung: <object>-Marke erfordert Code-Attribut."},
            {"appletviewer.parse.warning.object.requiresheight", "Warnung: <object>-Marke erfordert H\u00f6henattribut."},
            {"appletviewer.parse.warning.object.requireswidth", "Warnung: <object>-Marke erfordert Breitenattribut."},
            {"appletviewer.parse.warning.embed.requirescode", "Warnung: <embed>-Marke erfordert Code-Attribut."},
            {"appletviewer.parse.warning.embed.requiresheight", "Warnung: <embed>-Marke erfordert H\u00f6henattribut."},
            {"appletviewer.parse.warning.embed.requireswidth", "Warnung: <embed>-Marke erfordert Breitenattribut."},
            {"appletviewer.parse.warning.appnotLongersupported", "Warnung: <app>-Marke wird nicht mehr unterst\u00fctzt, verwenden Sie statt dessen <applet>:"},
            {"appletviewer.usage", "Syntax: appletviewer <Optionen> url(s)\n\nwobei zu den <Optionen> geh\u00f6ren:\n  -debug                  Starten des Applet-Viewers im Java-Debugger\n  -encoding <Codierung>    Angabe der von HTML-Dateien verwendeten Zeichencodierung\n  -J<Laufzeit-Flag>        \u00dcbergeben des Arguments an den Java-Interpreter\n\nDie Option -J ist keine Standardoption und kann \u00c4nderungen unterliegen."},
            {"appletviewer.main.err.unsupportedopt", "Nicht unterst\u00fctzte Option: {0}"},
            {"appletviewer.main.err.unrecognizedarg", "Nicht erkanntes Argument: {0}"},
            {"appletviewer.main.err.dupoption", "Doppelte Verwendung der Option: {0}"},
	    {"appletviewer.main.err.inputfile", "Keine Eingabedateien angegeben."},
            {"appletviewer.main.err.badurl", "Fehlerhafte URL: {0} ( {1} )"},
            {"appletviewer.main.err.io", "E/A-Ausnahme beim Lesen: {0}"},
            {"appletviewer.main.err.readablefile", "Stellen Sie sicher, dass {0} eine lesbare Datei ist."},
            {"appletviewer.main.err.correcturl", "Ist {0} die richtige URL?"},
            {"appletviewer.main.prop.store", "Benutzerspezifische Eigenschaften f\u00fcr AppletViewer"},
	    {"appletviewer.main.err.prop.cantread", "Benutzereigenschaftendatei kann nicht gelesen werden: {0}"},
            {"appletviewer.main.err.prop.cantsave", "Benutzereigenschaftendatei kann nicht gespeichert werden: {0}"},
            {"appletviewer.main.warn.nosecmgr", "Warnung: Sicherheit wird deaktiviert."},
	    {"appletviewer.main.debug.cantfinddebug", "Der Debugger wurde nicht gefunden!"},
	    {"appletviewer.main.debug.cantfindmain", "Hauptmethode wurde nicht im Debugger gefunden!"},
            {"appletviewer.main.debug.exceptionindebug", "Ausnahme im Debugger!"},
	    {"appletviewer.main.debug.cantaccess", "Zugriff auf den Debugger nicht m\u00f6glich!"},
            {"appletviewer.main.nosecmgr", "Warnung: SecurityManager nicht installiert!"},
            {"appletviewer.main.warning", "Warnung: Es wurden keine Applets gestartet. Stellen Sie sicher, dass die Eingabe eine <applet>-Marke enth\u00e4lt."},
            {"appletviewer.main.warn.prop.overwrite", "Warnung: Auf Anforderung des Benutzers wird die Systemeigenschaft vor\u00fcbergehend \u00fcberschrieben: Schl\u00fcssel: {0} alter Wert: {1} neuer Wert: {2}"},
            {"appletviewer.main.warn.cantreadprops", "Warnung: AppletViewer-Eigenschaftendatei kann nicht gelesen werden: {0} Standardwerte werden verwendet."},
	    {"appletioexception.loadclass.throw.interrupted", "Laden von Klassen unterbrochen: {0}"},
            {"appletioexception.loadclass.throw.notloaded", "Klasse nicht geladen: {0}"},
            {"appletclassloader.loadcode.verbose", "\u00d6ffne Stream zu {0}, um {1} abzurufen."},
            {"appletclassloader.filenotfound", "Datei beim Suchen nach {0} nicht gefunden"},
            {"appletclassloader.fileformat", "Dateiformatausnahme beim Laden: {0}"},
            {"appletclassloader.fileioexception", "E/A-Ausnahme beim Laden: {0}"},
            {"appletclassloader.fileexception", "{0} Ausnahme beim Laden: {1}"},
            {"appletclassloader.filedeath", "{0} gel\u00f6scht beim Laden: {1}"},
            {"appletclassloader.fileerror", "{0} Fehler beim Laden: {1}"},
            {"appletclassloader.findclass.verbose.findclass", "{0} sucht Klasse {1}"},
            {"appletclassloader.findclass.verbose.openstream", "\u00d6ffne Stream zu {0}, um {1} abzurufen."},
            {"appletclassloader.getresource.verbose.forname", "AppletClassLoader.getResource f\u00fcr Name: {0}"},
            {"appletclassloader.getresource.verbose.found", "Ressource {0} als Systemressource gefunden"},
            {"appletclassloader.getresourceasstream.verbose", "Ressource {0} als Systemressource gefunden"},
            {"appletpanel.runloader.err", "Entweder Objekt oder Code-Parameter!"},
            {"appletpanel.runloader.exception", "Ausnahme beim Deserialisieren von {0}"},
            {"appletpanel.destroyed", "Applet vernichtet"},
            {"appletpanel.loaded", "Applet geladen"},
            {"appletpanel.started", "Applet gestartet"},
            {"appletpanel.inited", "Applet initialisiert"},
            {"appletpanel.stopped", "Applet gestoppt"},
            {"appletpanel.disposed", "Applet abgelegt"},
            {"appletpanel.nocode", "APPLET-Marke ohne CODE-Parameter"},
            {"appletpanel.notfound", "Laden: Klasse {0} nicht gefunden"},
            {"appletpanel.nocreate", "Laden: Instanz von {0} kann nicht erstellt werden."},
            {"appletpanel.noconstruct", "Laden: {0} ist nicht \u00f6ffentlich oder hat keinen \u00f6ffentlichen Autor."},
            {"appletpanel.death", "gel\u00f6scht"},
            {"appletpanel.exception", "Ausnahme: {0}"},
            {"appletpanel.exception2", "Ausnahme: {0}: {1}"},
            {"appletpanel.error", "Fehler: {0}"},
            {"appletpanel.error2", "Fehler: {0}: {1}"},
            {"appletpanel.notloaded", "Initialisierung: Applet nicht geladen"},
            {"appletpanel.notinited", "Start: Applet nicht initialisiert"},
            {"appletpanel.notstarted", "Stopp: Applet nicht gestartet"},
            {"appletpanel.notstopped", "Vernichten: Applet nicht gestoppt"},
            {"appletpanel.notdestroyed", "Ablegen: Applet nicht vernichtet"},
            {"appletpanel.notdisposed", "Laden: Applet nicht abgelegt"},
            {"appletpanel.bail", "Unterbrochen: breche ab."},
            {"appletpanel.filenotfound", "Datei beim Suchen nach {0} nicht gefunden"},
            {"appletpanel.fileformat", "Dateiformatausnahme beim Laden von: {0}"},
            {"appletpanel.fileioexception", "E/A-Ausnahme beim Laden von: {0}"},
            {"appletpanel.fileexception", "{0} Ausnahme beim Laden von: {1}"},
            {"appletpanel.filedeath", "{0} gel\u00f6scht beim Laden von: {1}"},
            {"appletpanel.fileerror", "{0} Fehler beim Laden von: {1}"},
            {"appletpanel.badattribute.exception", "HTML-Parsing: fehlerhafter Wert bei Attribut f\u00fcr Breite/H\u00f6he"},
            {"appletillegalargumentexception.objectinputstream", "AppletObjectInputStream erfordert Nicht-Null-Lader."},
            {"appletprops.title", "AppletViewer-Eigenschaften"},
            {"appletprops.label.http.server", "Http-Proxy-Server:"},
            {"appletprops.label.http.proxy", "Http-Proxy-Port:"},
            {"appletprops.label.network", "Netzwerkzugriff:"},
            {"appletprops.choice.network.item.none", "Keiner"},
            {"appletprops.choice.network.item.applethost", "Applet-Host"},
            {"appletprops.choice.network.item.unrestricted", "Unbeschr\u00e4nkt"},
            {"appletprops.label.class", "Klassenzugriff:"},
            {"appletprops.choice.class.item.restricted", "Beschr\u00e4nkt"},
            {"appletprops.choice.class.item.unrestricted", "Unbeschr\u00e4nkt"},
            {"appletprops.label.unsignedapplet", "Unsignierte Applets zulassen:"},
            {"appletprops.choice.unsignedapplet.no", "Nein"},
            {"appletprops.choice.unsignedapplet.yes", "Ja"},
            {"appletprops.button.apply", "Anwenden"},
            {"appletprops.button.cancel", "Abbrechen"},
            {"appletprops.button.reset", "Zur\u00fccksetzen"},
            {"appletprops.apply.exception", "Konnte Eigenschaften nicht speichern: {0}"},
            /* 4066432 */
	    {"appletprops.title.invalidproxy", "Ung\u00fcltiger Eintrag"},
	    {"appletprops.label.invalidproxy", "Proxy-Anschluss muss eine positive ganze Zahl sein."},
	    {"appletprops.button.ok", "OK"},
	    /* end 4066432 */
            {"appletprops.prop.store", "Benutzerspezifische Eigenschaften f\u00fcr AppletViewer"},
            {"appletsecurityexception.checkcreateclassloader", "Sicherheitsausnahme: classloader"},
            {"appletsecurityexception.checkaccess.thread", "Sicherheitsausnahme: Thread"},
            {"appletsecurityexception.checkaccess.threadgroup", "Sicherheitsausnahme: Thread-Gruppe: {0}"},
            {"appletsecurityexception.checkexit", "Sicherheitsausnahme: beenden: {0}"},
            {"appletsecurityexception.checkexec", "Sicherheitsausnahme: ausf\u00fchren: {0}"},
            {"appletsecurityexception.checklink", "Sicherheitsausnahme: verkn\u00fcpfen: {0}"},
            {"appletsecurityexception.checkpropsaccess", "Sicherheitsausnahme: Eigenschaften"},
            {"appletsecurityexception.checkpropsaccess.key", "Sicherheitsausnahme: Eigenschaftenzugriff {0}"},
            {"appletsecurityexception.checkread.exception1", "Sicherheitsausnahme: {0}, {1}"},
            {"appletsecurityexception.checkread.exception2", "Sicherheitsausnahme: Datei.lesen: {0}"},
            {"appletsecurityexception.checkread", "Sicherheitsausnahme: Datei.lesen: {0} == {1}"},
            {"appletsecurityexception.checkwrite.exception", "Sicherheitsausnahme: {0}, {1}"},
            {"appletsecurityexception.checkwrite", "Sicherheitsausnahme: Datei.schreiben: {0} == {1}"},
            {"appletsecurityexception.checkread.fd", "Sicherheitsausnahme: fd.lesen"},
            {"appletsecurityexception.checkwrite.fd", "Sicherheitsausnahme: fd.schreiben"},
            {"appletsecurityexception.checklisten", "Sicherheitsausnahme: Socket.empfangen: {0}"},
            {"appletsecurityexception.checkaccept", "Sicherheitsausnahme: Socket.best\u00e4tigen: {0}:{1}"},
            {"appletsecurityexception.checkconnect.networknone", "Sicherheitsausnahme: Socket.verbinden: {0}->{1}"},
            {"appletsecurityexception.checkconnect.networkhost1", "Sicherheitsausnahme: Konnte von {1} aus keine Verbindung mit {0} herstellen."},
            {"appletsecurityexception.checkconnect.networkhost2", "Sicherheitsausnahme: Konnte IP f\u00fcr Host {0} oder {1} nicht aufl\u00f6sen."},
            {"appletsecurityexception.checkconnect.networkhost3", "Sicherheitsausnahme: Konnte IP f\u00fcr Host {0} nicht aufl\u00f6sen. Siehe Eigenschaft trustProxy."},
            {"appletsecurityexception.checkconnect", "Sicherheitsausnahme: verbinden: {0}->{1}"},
            {"appletsecurityexception.checkpackageaccess", "Sicherheitsausnahme: Kann nicht auf Package zugreifen: {0}"},
            {"appletsecurityexception.checkpackagedefinition", "Sicherheitsausnahme: Kann Package nicht definieren: {0}"},
            {"appletsecurityexception.cannotsetfactory", "Sicherheitsausnahme: Kann Werkseinstellungen nicht setzen"},
            {"appletsecurityexception.checkmemberaccess", "Sicherheitsausnahme: Mitgliedszugriff pr\u00fcfen"},
            {"appletsecurityexception.checkgetprintjob", "Sicherheitsausnahme: getPrintJob"},
            {"appletsecurityexception.checksystemclipboardaccess", "Sicherheitsausnahme: getSystemClipboard"},
            {"appletsecurityexception.checkawteventqueueaccess", "Sicherheitsausnahme: getEventQueue"},
            {"appletsecurityexception.checksecurityaccess", "Sicherheitsausnahme: Sicherheitsoperation: {0}"},
            {"appletsecurityexception.getsecuritycontext.unknown", "Unbekannter Klassenladertyp. Konnte nicht auf getContext pr\u00fcfen."},
            {"appletsecurityexception.checkread.unknown", "Unbekannter Klassenladertyp. Konnte \u00dcberpr\u00fcfen des Lesevorgangs {0} nicht pr\u00fcfen."},
            {"appletsecurityexception.checkconnect.unknown", "Unbekannter Klassenladertyp. Konnte \u00dcberpr\u00fcfen der Verbindung nicht pr\u00fcfen."},
        };
    }
}
