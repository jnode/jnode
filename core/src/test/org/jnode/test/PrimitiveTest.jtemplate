/*
 * $Id: PrimitiveTest.jtemplate,v 1.1 2003/11/25 11:41:41 epr Exp $
 */
package org.jnode.test;

/**
 * @author epr
 */
public class @classname@ {

	public static void main(String [] args) {
		System.out.println(add(10, 12));
		System.out.println(add(0, -12));
		System.out.println(add(-54, 7816));
		System.out.println(add(-5472, -14));

		System.out.println(sub(10, 12));
		System.out.println(sub(0, -12));
		System.out.println(sub(-54, 7816));
		System.out.println(sub(-5472, -14));

		System.out.println(mul(10, 12));
		System.out.println(mul(0, -12));
		System.out.println(mul(-54, 7816));
		System.out.println(mul(-5472, -14));

		System.out.println(div(10, 12));
		System.out.println(div(0, -12));
		System.out.println(div(-54, 7816));
		System.out.println(div(-5472, -14));

		System.out.println(rem(10, 12));
		System.out.println(rem(0, -12));
		System.out.println(rem(-54, 7816));
		System.out.println(rem(-5472, -14));
	}

	public static @type@ add(@type@ a1, @type@ a2) {
		return a1 + a2;
	}

	public static @type@ sub(@type@ a1, @type@ a2) {
		return a1 - a2;
	}

	public static @type@ mul(@type@ a1, @type@ a2) {
		return a1 * a2;
	}

	public static @type@ div(@type@ a1, @type@ a2) {
		return a1 / a2;
	}

	public static @type@ rem(@type@ a1, @type@ a2) {
		return a1 % a2;
	}

	public static @type@ neg(@type@ a1) {
		return -a1;
	}

	public static @type@ addAdd(@type@ a1, @type@ a2, @type@ a3) {
		return (a1 + a2) + a3;
	}

	public static @type@ addSub(@type@ a1, @type@ a2, @type@ a3) {
		return (a1 + a2) - a3;
	}

	public static @type@ addMul(@type@ a1, @type@ a2, @type@ a3) {
		return (a1 + a2) * a3;
	}

	public static @type@ addDiv(@type@ a1, @type@ a2, @type@ a3) {
		return (a1 + a2) / a3;
	}

	public static @type@ addRem(@type@ a1, @type@ a2, @type@ a3) {
		return (a1 + a2) % a3;
	}

	public static @type@ addAddAdd(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return ((a1 + a2) + a3) + a4;
	}

	public static @type@ addAddSub(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return ((a1 + a2) + a3) - a4;
	}

	public static @type@ addAddMul(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return ((a1 + a2) + a3) * a4;
	}

	public static @type@ addAddDiv(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return ((a1 + a2) + a3) / a4;
	}

	public static @type@ addAadRem(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return ((a1 + a2) + a3) % a4;
	}

	public static @type@ addSubSub(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return (a1 + a2) - (a3 - a4);
	}

	public static @type@ addMulSub(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return (a1 + a2) * (a3 - a4);
	}

	public static @type@ addDivSub(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return (a1 + a2) / (a3 - a4);
	}

	public static @type@ addRemSub(@type@ a1, @type@ a2, @type@ a3, @type@ a4) {
		return (a1 + a2) % (a3 - a4);
	}

	public static boolean lt(@type@ a1, @type@ a2) {
		return (a1 < a2);
	}

	public static boolean le(@type@ a1, @type@ a2) {
		return (a1 <= a2);
	}

	public static boolean gt(@type@ a1, @type@ a2) {
		return (a1 > a2);
	}

	public static boolean ge(@type@ a1, @type@ a2) {
		return (a1 >= a2);
	}

	public static boolean eq(@type@ a1, @type@ a2) {
		return (a1 == a2);
	}

	public static boolean ne(@type@ a1, @type@ a2) {
		return (a1 != a2);
	}

}
