/*
 * Automatically generated by jrpcgen 1.0.7 on 10/5/07 11:51 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package org.jnode.fs.nfs.nfs2.rpc.nfs;

import java.io.IOException;
import java.net.InetAddress;

import org.acplt.oncrpc.OncRpcClientStub;
import org.acplt.oncrpc.OncRpcException;
import org.acplt.oncrpc.XdrAble;
import org.acplt.oncrpc.XdrDecodingStream;
import org.acplt.oncrpc.XdrEncodingStream;
import org.acplt.oncrpc.XdrVoid;

/**
 * The class <code>NFS2Client</code> implements the client stub proxy for the
 * NFS_PROGRAM remote program. It provides method stubs which, when called, in
 * turn call the appropriate remote method (procedure).
 */
public class NFS2Client extends OncRpcClientStub {

    public static final int FILE_HANDLE_SIZE = 32;
    public static final int MAX_NAME_LENGTH = 255;
    public static final int MAX_PATH_LENGTH = 1024;
    public static final int COOKIE_SIZE = 4;
    public static final int MAX_DATA = 8192;

    private static final int NFS_VERSION = 2;
    private static final int NFS_PROGRAM = 100003;

    private static final int PROCEDURE_TEST = 0;
    private static final int PROCEDURE_READ_FILE = 6;
    private static final int PROCEDURE_LIST_DIRECTORY = 16;
    private static final int PROCEDURE_LOOKUP = 4;

    /**
     * Constructs a <code>NFS2Client</code> client stub proxy object from
     * which the NFS_PROGRAM remote program can be accessed.
     *
     * @param host     Internet address of host where to contact the remote
     *                 program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *                 used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException     if an I/O error occurs.
     */
    public NFS2Client(InetAddress host, int protocol) throws OncRpcException, IOException {
        super(host, NFS_PROGRAM, 2, 0, protocol);
    }

    /**
     * Constructs a <code>NFS2Client</code> client stub proxy object from
     * which the NFS_PROGRAM remote program can be accessed.
     *
     * @param host     Internet address of host where to contact the remote
     *                 program.
     * @param port     Port number at host where the remote program can be
     *                 reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *                 used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException     if an I/O error occurs.
     */
    public NFS2Client(InetAddress host, int port, int protocol) throws OncRpcException, IOException {
        super(host, NFS_PROGRAM, 2, port, protocol);
    }

    /**
     * Call remote procedure test.
     *
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException     if an I/O error occurs.
     */
    public void test() throws OncRpcException, IOException {
        XdrVoid argument = XdrVoid.XDR_VOID;
        XdrVoid result = XdrVoid.XDR_VOID;
        client.call(PROCEDURE_TEST, NFS_VERSION, argument, result);
    }


    public LookupResult lookup(final byte[] fileHandle, final String entryName) throws OncRpcException, IOException {

        XdrAble parameter = new AbstractParameter() {

            public void xdrEncode(XdrEncodingStream xdr) throws OncRpcException, IOException {
                xdr.xdrEncodeOpaque(fileHandle, NFS2Client.FILE_HANDLE_SIZE);
                xdr.xdrEncodeString(entryName);

            }

        };

        LookupResult result = new LookupResult();
        client.call(PROCEDURE_LOOKUP, NFS_VERSION, parameter, result);
        return result;
    }


    public ListDirectoryResult listDirectory(final byte[] fileHandle, final byte[] cookie, final int count) throws OncRpcException, IOException {

        XdrAble parameter = new AbstractParameter() {

            public void xdrEncode(XdrEncodingStream xdr) throws OncRpcException, IOException {
                xdr.xdrEncodeOpaque(fileHandle, FILE_HANDLE_SIZE);
                xdr.xdrEncodeOpaque(cookie, COOKIE_SIZE);
                xdr.xdrEncodeInt(count);

            }

        };

        ListDirectoryResult result = new ListDirectoryResult();
        client.call(PROCEDURE_LIST_DIRECTORY, NFS_VERSION, parameter, result);
        return result;
    }


    public ReadFileResult readFile(final byte[] fileHandle, final int offset, final int count) throws OncRpcException, IOException {

        XdrAble parameter = new AbstractParameter() {

            public void xdrEncode(XdrEncodingStream xdr) throws OncRpcException, IOException {
                xdr.xdrEncodeOpaque(fileHandle, FILE_HANDLE_SIZE);
                xdr.xdrEncodeInt(offset);
                xdr.xdrEncodeInt(count);
                xdr.xdrEncodeInt(0);

            }

        };


        ReadFileResult result = new ReadFileResult();
        client.call(PROCEDURE_READ_FILE, NFS_VERSION, parameter, result);
        return result;
    }


    private abstract class AbstractParameter implements XdrAble {

        public void xdrDecode(XdrDecodingStream xdr) throws OncRpcException, IOException {
            // It is not mandatory because it is a parameter.

        }

    }

}
// End of NFS2Client.java
