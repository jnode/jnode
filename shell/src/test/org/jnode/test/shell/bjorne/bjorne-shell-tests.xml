<testSet title="Bjorne interpreter tests">
    <plugin id="org.jnode.shell.bjorne" class="org.jnode.test.shell.bjorne.BjornePseudoPlugin"/>
    <plugin id="org.jnode.command.common"/>
    <plugin id="org.jnode.command.file"/>
    <testSpec title="simple" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
echo HI
        </script>
        <output>HI
</output>
    </testSpec>
    <testSpec title="continuation" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
        echo hello \
mother
        </script>
        <output>hello mother
</output>
    </testSpec>
    <testSpec title="&amp;&amp;" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
        true &amp;&amp; echo hi
        false &amp;&amp; echo bye
        </script>
        <output>hi
</output>
    </testSpec>
    <testSpec title="&amp;&amp; multiline" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
        true &amp;&amp; 
        echo hi
        false &amp;&amp; 
        echo bye
        </script>
        <output>hi
</output>
    </testSpec>
    <testSpec title="$?" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
true
echo $?
false
echo $?
false

echo $?
false
# no comment
echo $?
</script>
        <output>0
1
1
1
</output>
    </testSpec>
    <testSpec title="quote handling" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
echo ${PS1}+
PS1="] "
echo ${PS1}+
PS1='] '
echo ${PS1}+
PS1=]\ 
echo ${PS1}+
</script>
        <output>$ +
] +
] +
] +
</output>
    </testSpec>
    <testSpec title="`...`" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
A=1
echo $A
B=`expr $A + 1`
echo $B
C=`echo $A $A`
echo $C
</script>
        <output>1
2
1 1
</output>
    </testSpec>
    <testSpec title="$(...)" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
A=1
echo $A
B="$(expr $A + 1)"
echo $B
C="$(echo $A $A)"
echo $C
</script>
        <output>1
2
1 1
</output>
    </testSpec>
    <testSpec title="$((...))" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
A=1
echo $A
B="$((A + 1))"
echo $B
C="$(($B + 1))"
echo $C
</script>
        <output>1
2
3
</output>
    </testSpec>
    <testSpec title="if ... then ... fi" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
if true ; then echo HI ; fi
        </script>
        <output>HI
</output>
    </testSpec>
    <testSpec title="if ... then ... fi multi-line" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
if true 
then echo HI
fi
        </script>
        <output>HI
</output>
    </testSpec>
    <testSpec title="if ... then ... else ... fi" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
if true ; then echo HI ; else echo HO; fi
if false ; then echo HI ; else echo HO; fi
        </script>
        <output>HI
HO
</output>
    </testSpec>
    <testSpec title="if ... then ... else ... fi multi-line" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
if true ; 
then echo HI ; 
else echo HO; 
fi
if false 
then echo HI 
else echo HO
fi
        </script>
        <output>HI
HO
</output>
    </testSpec>
    <testSpec title="if ... then ... elif ... else ... fi" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
if true ; then echo HI ; elif false ; then echo HO ; else echo HUM; fi
if false ; then echo HI ; elif true ; then echo HO ; else echo HUM; fi
if false ; then echo HI ; elif false ; then echo HO ; else echo HUM; fi
        </script>
        <output>HI
HO
HUM
</output>
    </testSpec>
    <testSpec title="if ... then ... elif ... else ... fi multi-line" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
if true ; 
then echo HI ; 
elif false ; 
then echo HO ; 
else 
echo HUM; 
fi
if false ; 
then echo HI ; 
elif true ; 
then 
echo HO ; 
else echo HUM; 
fi
if false 
then echo HI 
elif false 
then echo HO 
else echo HUM
fi
        </script>
        <output>HI
HO
HUM
</output>
    </testSpec>
    <testSpec title="for ... do ... done" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
for A in 5 4 3 2 1 ; do echo A is $A ; done
        </script>
        <output>A is 5
A is 4
A is 3
A is 2
A is 1
</output>
    </testSpec>
    <testSpec title="for in `...` do ... done" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
for A in `echo 5 4 3 2 1` ; do echo A is $A ; done
        </script>
        <output>A is 5
A is 4
A is 3
A is 2
A is 1
</output>
    </testSpec>
    <testSpec title="for ... do ... done multi-line" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
for A in 5 4 3 2 1 ; 
do echo A is $A ; 
done
for A in 5 4 3 2 1 
do 
echo A is $A 
done
        </script>
        <output>A is 5
A is 4
A is 3
A is 2
A is 1
A is 5
A is 4
A is 3
A is 2
A is 1
</output>
    </testSpec>
    <testSpec title="while ... do ... done" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
A=5
while expr $A != 0 ; do echo A is $A ; A=`expr $A - 1`; done
        </script>
        <output>1
A is 5
1
A is 4
1
A is 3
1
A is 2
1
A is 1
0
</output>
    </testSpec>
    <testSpec title="while ... do ... done multi-line" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
A=5
while expr $A != 0 ;
do echo A is $A ; 
A=`expr $A - 1`; 
done
        </script>
        <output>1
A is 5
1
A is 4
1
A is 3
1
A is 2
1
A is 1
0
</output>
    </testSpec>
    <testSpec title="while ... do ... break ... done" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                A=5
                while expr $A != 0 ; do echo A is $A ; if expr $A = 2 ; then break ; fi ; A=`expr $A - 1`; done
        </script>
        <output>1
A is 5
0
1
A is 4
0
1
A is 3
0
1
A is 2
1
</output>
    </testSpec>
    <testSpec title="while ... do ... break ... done multi-line" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                A=5
                while expr $A != 0 
                do 
                echo A is $A 
                if expr $A = 2 ; then break ; fi ; A=`expr $A - 1`
                done
        </script>
        <output>1
A is 5
0
1
A is 4
0
1
A is 3
0
1
A is 2
1
</output>
    </testSpec>
    <testSpec title="case ... esac" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                case 1 in ( 1 ) echo hi mum ;; 2 ) echo bye mum ; esac
                case 1 in 1 ) echo hi mum ;; 2 ) echo bye mum ; esac
                case 2 in ( 1 ) echo hi mum ;; 2 ) echo bye mum ; esac
                case 2 in ( 1 | 2 ) echo hi mum ;; 3 ) echo bye mum ; esac
                case 2 in ( 1 | 2 ) echo hi mum ;; 3 ) echo bye mum ;; esac
                case 3 in ( 1 | 2 ) echo hi mum ;; 3 ) echo bye ; echo mum ; esac
        </script>
        <output>hi mum
hi mum
bye mum
hi mum
hi mum
bye
mum
</output>
    </testSpec>
    <testSpec title="case ... esac multi-line" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                case 1 in 
                   ( 1 ) echo hi mum ;; 
                     2 ) echo bye mum 
                esac
                case 1 in
                   1 ) echo hi mum ;; 
                   2 ) echo bye mum ; esac
                case 2 in ( 1 ) echo hi mum ;; 
                   2 ) echo bye mum
                esac
                case 2 in ( 1 | 2 ) echo hi mum ;; 
                     3 ) echo bye mum ;; esac
                case 2 in ( 1 | 2 ) echo hi mum ;; 
                     3 ) echo bye mum ;; 
                esac
        </script>
        <output>hi mum
hi mum
bye mum
hi mum
hi mum
</output>
    </testSpec>
    <testSpec title="${...} expansions" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                A=cat
                B=
                echo A is $A
                echo A is ${A}
                echo B is $B
                echo B is ${B}
                echo X is $X
                echo X is ${X}
                echo A length is ${#A}
                echo B length is ${#B}
                echo X length is ${#X}
                echo A :- dog is ${A:-dog}
                echo B :- dog is ${B:-dog}
                echo X :- dog is ${X:-dog}
                echo A - dog is ${A-dog}
                echo B - dog is ${B-dog}
                echo X - dog is ${X-dog}
                echo A :- null is ${A:-}
                echo B :- null is ${B:-}
                echo X :- null is ${X:-}
                echo A - null is ${A-}
                echo B - null is ${B-}
                echo X - null is ${X-}
                echo A :+ dog is ${A:+dog}
                echo B :+ dog is ${B:+dog}
                echo X :+ dog is ${X:+dog}
                echo A + dog is ${A+dog}
                echo B + dog is ${B+dog}
                echo X + dog is ${X+dog}
                echo A :+ null is ${A:+}
                echo B :+ null is ${B:+}
                echo X :+ null is ${X:+}
                echo A + null is ${A+}
                echo B + null is ${B+}
                echo X + null is ${X+}
        </script>
        <output>A is cat
A is cat
B is
B is
X is
X is
A length is 3
B length is 0
X length is 0
A :- dog is cat
B :- dog is dog
X :- dog is dog
A - dog is cat
B - dog is
X - dog is dog
A :- null is cat
B :- null is
X :- null is
A - null is cat
B - null is
X - null is
A :+ dog is dog
B :+ dog is
X :+ dog is
A + dog is dog
B + dog is dog
X + dog is
A :+ null is
B :+ null is
X :+ null is
A + null is
B + null is
X + null is
</output>
    </testSpec>
    <testSpec title="${..?..} expansions #1" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
                A=cat
                B=
                echo A :? dog is ${A:?dog}
                echo B :? dog is ${B:?dog}
                echo X :? dog is ${X:?dog}
        </script>
        <output>A :? dog is cat
</output>
    <error>dog
</error>
    </testSpec>
    <testSpec title="${..?..} expansions #2" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
                A=cat
                B=
                echo A :? dog is ${A:?dog}
                echo X :? dog is ${X:?dog}
        </script>
        <output>A :? dog is cat
</output>
    <error>dog
</error>
    </testSpec>
    <testSpec title="${..?..} expansions #3" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
                A=cat
                B=
                echo A ? dog is ${A?dog}
                echo B ? dog is ${B?dog}
                echo X ? dog is ${X?dog}
        </script>
        <output>A ? dog is cat
B ? dog is
</output>
    <error>dog
</error>
    </testSpec>
    <testSpec title="${..?..} expansions #4" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
                A=cat
                B=
                echo A :? null is ${A:?}
                echo B :? null is ${B:?}
                echo X :? null is ${X:?}
        </script>
        <output>A :? null is cat
</output>
    <error>B is unset or null
</error>
    </testSpec>
    <testSpec title="${..?..} expansions #5" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
                A=cat
                B=
                echo A :? null is ${A:?}
                echo X :? null is ${X:?}
        </script>
        <output>A :? null is cat
</output>
    <error>X is unset or null
</error>
    </testSpec>
    <testSpec title="${..?..} expansions #6" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
                A=cat
                B=
                echo A ? null is ${A?}
                echo B ? null is ${B?}
                echo X ? null is ${X?}
        </script>
        <output>A ? null is cat
B ? null is
</output>
    <error>X is unset
</error>
    </testSpec>
    <testSpec title="${..=..} expansions" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                A=cat
                B=
                echo A := dog is ${A:=dog}
                echo $A
                echo B := dog is ${B:=dog}
                echo $B
                echo X := dog is ${X:=dog}
                echo $X
        </script>
        <output>A := dog is cat
cat
B := dog is dog
dog
X := dog is dog
dog
</output>
    </testSpec>
    <testSpec title="${..=..} expansions #2" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                A=cat
                B=
                echo A = dog is ${A=dog}
                echo $A
                echo B = dog is ${B=dog}
                echo $B
                echo X = dog is ${X=dog}
                echo $X
        </script>
        <output>A = dog is cat
cat
B = dog is

X = dog is dog
dog
</output>
    </testSpec>
    <testSpec title="${..#..} expansions" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                A=cat
                B=caaat
                echo A hash ca is ${A#ca}
                echo B hash ca is ${B#ca}
                echo A hash c\? is ${A#c?}
                echo B hash c\? is ${B#c?}
                echo A hash c\* is ${A#c*}
                echo B hash c\* is ${B#c*}
        </script>
        <output>A hash ca is t
B hash ca is aat
A hash c? is t
B hash c? is aat
A hash c* is at
B hash c* is aaat
</output>
    </testSpec>
    <testSpec title="${..##..} expansions" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                A=cat
                B=caaat
                echo A hashhash ca is ${A##ca}
                echo B hashhash ca is ${B##ca}
                echo A hashhash c\? is ${A##c?}
                echo B hashhash c\? is ${B##c?}
                echo A hashhash c\* is ${A##c*}
                echo B hashhash c\* is ${B##c*}
        </script>
        <output>A hashhash ca is t
B hashhash ca is aat
A hashhash c? is t
B hashhash c? is aat
A hashhash c* is
B hashhash c* is
</output>
    </testSpec>
    <testSpec title="${..%..} expansions" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                A=cat
                B=caaat
                echo A % at is ${A%at}
                echo B % at is ${B%at}
                echo A % \?t is ${A%?t}
                echo B % \?t is ${B%?t}
                echo A % \*t is ${A%*t}
                echo B % \*t is ${B%*t}
        </script>
        <output>A % at is c
B % at is caa
A % ?t is c
B % ?t is caa
A % *t is ca
B % *t is caaa
</output>
    </testSpec>
    <testSpec title="script arguments" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo $0
                echo $1
                echo $2
                echo $3
                echo $#
                echo $*
        </script>
        <arg>arg1</arg>
        <arg>arg2</arg>
        <output>test
arg1
arg2

2
arg1 arg2
</output>
    </testSpec>
    <testSpec title="set arguments" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo $*
                set newarg1 newarg2
                echo $*
                set -- newarg1 newarg2
                echo $*
                set --
                echo $*
        </script>
        <arg>arg1</arg>
        <arg>arg2</arg>
        <output>arg1 arg2
newarg1 newarg2
newarg1 newarg2

</output>
    </testSpec>
    <testSpec title="set arguments" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo $*
                shift 0
                echo $*
                shift
                echo $*
                shift 2
                echo $*
        </script>
        <arg>1</arg>
        <arg>2</arg>
        <arg>3</arg>
        <arg>4</arg>
        <arg>5</arg>
        <output>1 2 3 4 5
1 2 3 4 5
2 3 4 5
4 5
</output>
    </testSpec>
    <testSpec title="quote handling" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                set -x
                echo a b
                echo 'a b'
                echo "a b"
                echo $*
                echo $@@
                echo "$*"
                echo "$@@"
        </script>
        <arg>arg1</arg>
        <arg>arg2</arg>
        <output>a b
a b
a b
arg1 arg2
arg1 arg2
arg1 arg2
arg1 arg2
</output>
        <error> + echo a b
 + echo 'a b'
 + echo 'a b'
 + echo arg1 arg2
 + echo arg1 arg2
 + echo 'arg1 arg2'
 + echo arg1 arg2
</error>
    </testSpec>
    <testSpec title="globbing" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo &gt; @TEMP_DIR@/xyzzy Hi mum
                echo @TEMP_DIR@/*
                echo @TEMP_DIR@/\*
                echo @TEMP_DIR@/"*"
                echo @TEMP_DIR@/'*'
                echo "@TEMP_DIR@/*"
                echo '@TEMP_DIR@/*'
        </script>
        <file name="xyzzy" input="false">Hi mum
</file>
    <output>/tmp/jnodeTestDir/xyzzy
/tmp/jnodeTestDir/*
/tmp/jnodeTestDir/*
/tmp/jnodeTestDir/*
/tmp/jnodeTestDir/*
/tmp/jnodeTestDir/*
</output>
    </testSpec>
    <testSpec title="redirection" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo &gt; @TEMP_DIR@/1 Hi mum
                echo &gt; @TEMP_DIR@/2 Hi mum
                echo &gt;&gt; @TEMP_DIR@/2 Hi mum again
                echo Hello mother
                echo Hello mother again 1&gt;&amp;2
        </script>
        <file name="1" input="false">Hi mum
</file>
        <file name="2" input="false">Hi mum
Hi mum again
</file>
    <output>Hello mother
</output>
    <error>Hello mother again
</error>
    </testSpec>
    <testSpec title="redirection 2" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                cat &lt; @TEMP_DIR@/1 &gt; @TEMP_DIR@/2 
        </script>
        <file name="1" input="true">Hi mum
Hi mum again
</file>
        <file name="2" input="false">Hi mum
Hi mum again
</file>
    </testSpec>
    <testSpec title="here" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                cat &lt;&lt;EOF &gt; @TEMP_DIR@/1 
Hi mum
Hi mum again
EOF
        </script>
        <file name="1" input="false">Hi mum
Hi mum again
</file>
    </testSpec>
    <testSpec title="here 2" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                for i in 1 2 3 4 5 ; do cat &lt;&lt;EOF ; done 
Hi mum $i
EOF
        </script>
        <output>Hi mum 1
Hi mum 2
Hi mum 3
Hi mum 4
Hi mum 5
</output>
    </testSpec>
    <testSpec title="here 3" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                for i in 1 2 3 4 5 ; do cat &lt;&lt;EOF ; done 
Hi mum `echo $i`
EOF
        </script>
        <output>Hi mum 1
Hi mum 2
Hi mum 3
Hi mum 4
Hi mum 5
</output>
    </testSpec>
    <testSpec title="here 4" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                for i in 1 2 3 4 5 ; do cat &lt;&lt; "EOF" ; done 
Hi mum `echo $i`
EOF
        </script>
        <output>Hi mum `echo $i`
Hi mum `echo $i`
Hi mum `echo $i`
Hi mum `echo $i`
Hi mum `echo $i`
</output>
    </testSpec>
    <testSpec title="pipeline" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo &gt; @TEMP_DIR@/1 Hi mum
                echo &gt; @TEMP_DIR@/2 Hi mum again
                cat @TEMP_DIR@/1 @TEMP_DIR@/2 @TEMP_DIR@/1 @TEMP_DIR@/2 | cat > @TEMP_DIR@/3
        </script>
        <file name="1" input="false">Hi mum
</file>
        <file name="2" input="false">Hi mum again
</file>
        <file name="3" input="false">Hi mum
Hi mum again
Hi mum
Hi mum again
</file>
    </testSpec>   
    <testSpec title="pipeline 2" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo &gt; @TEMP_DIR@/1 Hi mum
                echo &gt; @TEMP_DIR@/2 Hi mum again
                cat @TEMP_DIR@/1 @TEMP_DIR@/2 @TEMP_DIR@/1 @TEMP_DIR@/2 | cat
        </script>
        <file name="1" input="false">Hi mum
</file>
        <file name="2" input="false">Hi mum again
</file>
    <output>Hi mum
Hi mum again
Hi mum
Hi mum again
</output>
    </testSpec>
    <testSpec title="pipeline multiline" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
        echo Hi |
        cat
        </script>
        <output>Hi
</output>
    </testSpec>
    <testSpec title="weird pipeline" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
        echo Hi | aa=bb
        </script>
    </testSpec>
    <testSpec title="subshell" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo &gt; @TEMP_DIR@/1 Hi mum
                echo &gt; @TEMP_DIR@/2 Hi mum again
                ( cat @TEMP_DIR@/1 ; cat @TEMP_DIR@/2 )
        </script>
        <file name="1" input="false">Hi mum
</file>
        <file name="2" input="false">Hi mum again
</file>
        <output>Hi mum
Hi mum again
</output>
    </testSpec>
    <testSpec title="subshell 2" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo &gt; @TEMP_DIR@/1 Hi mum
                echo &gt; @TEMP_DIR@/2 Hi mum again
                ( cat @TEMP_DIR@/1 ; cat @TEMP_DIR@/2 ) &gt; @TEMP_DIR@/3
        </script>
        <file name="1" input="false">Hi mum
</file>
        <file name="2" input="false">Hi mum again
</file>
        <file name="3" input="false">Hi mum
Hi mum again
</file>
    </testSpec>
    <testSpec title="subshell 3" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                echo &gt; @TEMP_DIR@/1 Hi mum
                echo &gt; @TEMP_DIR@/2 Hi mum again
                ( cat @TEMP_DIR@/1 ; cat @TEMP_DIR@/2 ) | cat &gt; @TEMP_DIR@/4
        </script>
        <file name="1" input="false">Hi mum
</file>
        <file name="2" input="false">Hi mum again
</file>
        <file name="4" input="false">Hi mum
Hi mum again
</file>
    </testSpec>
    <testSpec title="subshell 4" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                ( echo Hi mum ; echo Hi mum again ) | cat &gt; @TEMP_DIR@/1
        </script>
        <file name="1" input="false">Hi mum
Hi mum again
</file>
    </testSpec>
    <testSpec title="if to pipe" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
               if test $A ; then echo set ; else echo unset ; fi | cat &gt; @TEMP_DIR@/1
               ( if test $A ; then echo set ; else echo unset ; fi ) | cat &gt; @TEMP_DIR@/2
               A=1
               if test $A ; then echo set ; else echo unset ; fi | cat &gt; @TEMP_DIR@/3
               ( if test $A ; then echo set ; else echo unset ; fi ) | cat &gt; @TEMP_DIR@/4
        </script>
        <file name="1" input="false">unset
</file>
        <file name="2" input="false">unset
</file>
        <file name="3" input="false">set
</file>
        <file name="4" input="false">set
</file>
    </testSpec>
    <testSpec title="and_if multiline" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
                false &amp;&amp;
                true
        </script>
    </testSpec>
    <testSpec title="or_if multiline" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                true ||
                false
        </script>
    </testSpec>
    <testSpec title="brace group" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                { echo hi ; echo there ; }
        </script>
        <output>hi
there
</output>
    </testSpec>
    <testSpec title="brace group redir" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                { echo hi ; echo there ; } &gt; @TEMP_DIR@/1 
        </script>
        <file name="1" input="false">hi
there
</file>
    </testSpec>
    <testSpec title="for redir" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                for i in 1 2 3 ; do echo $i ; done &gt; @TEMP_DIR@/1 
        </script>
        <file name="1" input="false">1
2
3
</file>
    </testSpec>
    <testSpec title="while redir" command="test" runMode="AS_SCRIPT" rc="1">
        <script>#!bjorne
                A=5
                while expr $A != 0 ; do echo $A ; A=`expr $A - 1`; done &gt; @TEMP_DIR@/1 
        </script>
        <file name="1" input="false">1
5
1
4
1
3
1
2
1
1
0
</file>
    </testSpec>
    <testSpec title="unknown command" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                foo
                echo hi 
        </script>
        <output >hi
</output>
        <error>Cannot find an alias or load a command class for 'foo'
</error>
    </testSpec>
    <testSpec title="shell function" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                foo() {
                    echo hi
                }
                foo
        </script>
        <output>hi
</output>
    </testSpec>
    <testSpec title="shell function 2" command="test" runMode="AS_SCRIPT" rc="0">
        <script>#!bjorne
                foo() {
                    echo $1 $2
                }
                foo hi there
                foo bye mum &gt;&amp;2
        </script>
        <output>hi there
</output>
        <error>bye mum
</error>
    </testSpec>
</testSet>
